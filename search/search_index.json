{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The GHOSTS NPC Framework","text":"<p>Developed by Carnegie Mellon University's Software Engineering Institute (SEI), The GHOSTS Framework is an open-source (OSS) software framework that enables creating, deploying, and orchestrating complex non-player character (NPC) activity within training, exercise, simulation, and educational environments.</p> <p>If you've never seen GHOSTS in action, watch this quick three-minute introductory video on YouTube:</p> <p>In a basic setup, GHOSTS consists of a client and a server API. The client is installed on the simulated end user\u2019s device, such as a workstation, while the GHOSTS API runs on a management device. GHOSTS clients simulate user actions using timelines and NPCs. Timelines are manually configured to dictate client behavior, while NPCs act autonomously and interact with each other. The GHOSTS API allows administrators to modify the behavior of simulated users by sending new timelines, reconfiguring NPCs, and making other adjustments.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>This is the GHOSTS documentation site for the framework and all of its components. Each major component's detail is accessible from the main navigation. If anything is unclear or you still have questions, please do not hesitate to start a discussion \u2014 our community is growing and eager to help!</p>"},{"location":"#glossary","title":"Glossary","text":"<ul> <li> <p>NPCs (non-player characters) are part of the GHOSTS API and are given human-like characteristics such as jobs, personalities, and interests. They simulate user actions and interact with other NPCs through the GHOSTS Animator function. While NPC functionality is outside the scope of this application, an NPC page was required as part of the design.</p> </li> <li> <p>A timeline defines the tasks a machine is to perform, including the type of operation, its duration, start and end times, commands to be executed, and other operation-specific details. A timeline is made up of multiple handlers, each containing several events.</p> </li> <li> <p>A machine refers to a device running the GHOSTS Client. Machines can be assigned timelines that allow GHOSTS Client to simulate user activity.</p> </li> <li> <p>A machine group is a collection of machines. Assigning a timeline to a machine group applies that timeline to all machines within the group.</p> </li> </ul>"},{"location":"#cyber-ranges-and-crucible","title":"Cyber Ranges and Crucible","text":"<p>GHOSTS is typically run on machines within a virtualized network, often referred to as \"the range\". This network can be as simple or as complex as required for training, exercise, modeling, or simulation purposes.</p> <p>CERT's Cyber Mission Readiness (CMR) team has a great deal of experience in building cyber ranges for training, exercise, and simulation \u2014 captured in our technical report Foundation of Cyber Ranges. The report details the design considerations and execution plan for building high-fidelity, realistic virtual cyber ranges that deliver maximum training and exercise value for cyberwarfare participants.</p> Run GHOSTS on the Crucible Framework <p> GHOSTS runs very well within the SEI's Crucible Framework (Source Code and Docs) - which we use extensively for training and exercise here at Carnegie Mellon University (CMU)'s Software Engineering Institute, and particularly, within CERT.</p> <p>Building a sufficiently complex range for training and exercise purposes is often challenging. Crucible is a modular framework for creating, deploying, and managing virtual environments to support training, education, and exercises. Crucible is designed to be easy to use, extensible, and customizable to meet the needs of a wide variety of use cases.</p>"},{"location":"#philosophy","title":"Philosophy","text":"<p>GHOSTS evolved in our quest to create more realistic NPCs within cyberwarfare training and exercise. In 2018, we outlined our thoughts in a technical report entitled GHOSTS in the Machine: A Framework for Cyber-Warfare Exercise NPC Simulation.<sup>1</sup> In that report, we outline how the GHOSTS framework accomplishes the creation of simulations in which NPCs realistically represent a vast array of possible encounters and outcomes. We have continued to follow our initial path since. The litmus has always been that if we looked over someone's shoulder while they were using a computer, that is what GHOSTS should look like.<sup>2</sup></p> <p>Since then the framework has expanded to include tools that serve content in simulated environments, create NPCs with details about them that we can programmatically use to drive their decision-making, and machine learning agent preference engines. If it is related to replicating human behavior in terms of computing, we are interested in how GHOSTS can contribute within that space. Although these efforts listed here began separately, they are now all part of the GHOSTS framework proper.</p>"},{"location":"#reporting-bugs","title":"Reporting Bugs","text":"<p>Found a bug? Please report all bugs - including bugs for the individual components - in the cmu-sei/ghosts issue tracker. Include as much detail as possible including steps to reproduce, the specific components involved, and any error messages you may have found.</p>"},{"location":"#requesting-features","title":"Requesting Features","text":"<p>Have a good idea for a new feature? Submit all new feature requests through the cmu-sei/ghosts issue tracker. Include the reasons why you're requesting the new feature and how it might benefit other users.</p>"},{"location":"#license","title":"License","text":"<p>[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.</p> <p>Copyright 2018 Carnegie Mellon University. See the LICENSE.md file for details.</p> <ol> <li> <p>This paper is influenced by our previous paper R-EACTR: A Framework for Designing Realistic Cyber Warfare Exercises which outlines a design framework for cyber warfare exercises. It ensures that designs of team-based exercises factor realism into all aspects of the participant experience. Both of these papers are natural extensions to The CERT Approach to Cybersecurity Workforce Development.\u00a0\u21a9</p> </li> <li> <p>There is also a GHOSTS video presentation from FloCon 2021 that provides a general introduction to the framework.\u00a0\u21a9</p> </li> </ol>"},{"location":"new/","title":"What's New \ud83c\udd95 in GHOSTS v8 \ud83d\udc7b","text":"Welcome to GHOSTS <p>Welcome to what's new in the GHOSTS framework. Use this page to review the latest changes.</p>"},{"location":"new/#whats-new-in-82","title":"What's new in 8.2","text":"<ul> <li>GHOSTS now has a UI! Manage machines and machine groups, deploy new timelines, and view activities. \ud83d\ude0d</li> <li>GHOSTS Shadows provides integrations with an LLM for the purposes of GHOSTS agents. It provides multiple models for activities, chat, content, social, and whatever else you may need. \ud83d\udc7b</li> <li>GHOSTS LITE is a stripped-down version of GHOSTS that is designed to be more lightweight and require less resources to run certain activities in training, exercises, and simulations. \ud83d\udc40</li> <li>Fixes #385 default guid 00000000-0000-0000-0000-000000000000 animator NPC bug. \ud83d\udc1b</li> <li>Fixes #384 client path bug. \ud83d\udc1b</li> <li>Fixes animation cancellation token bugs (chat). \ud83d\udc1b</li> <li>Updated documentation for Animations (Thank you to the SEI's TMR team). \ud83e\udd19</li> </ul>"},{"location":"new/#whats-new-in-81","title":"What's new in 8.1","text":"<ul> <li>GHOSTS LITE BETA - when you want to conserve resources needed and participants won't access that machine directly.</li> <li>API clean up, particularly machine updates and groups.</li> <li>Made sample json objects easier to understand and submit the swagger generated defaults</li> <li>API robustness</li> <li>MachineGroups cleanup</li> <li>Timeline delivery by machine and by group</li> </ul>"},{"location":"new/#whats-new-in-80","title":"What's new in 8.0","text":""},{"location":"new/#enhancements","title":"Enhancements:","text":"<ul> <li>ANIMATOR and SPECTRE functionality merged into the GHOSTS API proper. Those projects are now archived. \ud83d\udcc1</li> <li>We have moved off mongo \u2014 all that data is now stored in Postgres \u2764\ufe0f.</li> <li>General docker-compose cleanup in hopes install and initial configuration problems are greatly minimized. \ud83e\uddf9</li> <li>Animator job management is now done through the UI. \ud83d\udda5\ufe0f</li> <li>This release is the beginning of moving from web requests to websockets \u2014 NPCs are now \"always connected\" \ud83d\udcf6 and do not need to \"check in\" or poll the server in order to execute activities, although these are still being built out, and the old system where clients poll the API server is still in place.</li> <li>Adds ability to configure random timespans to a timeline for delay before or delay after some activity is executed. \u23f3</li> <li>Cleans up and simplifies configuration on client and server systems (breaking change). \ud83e\udd16</li> <li>\"One docker-compose To Rule Them All\" \ud83d\udc8d \u2014 we were seeing installs fail because of piecemeal installation of various ghosts modules. Now, there is a single docker-compose file that will install all of the necessary components for a GHOSTS system.</li> <li>API endpoints have been re-organized in a more logical fashion. \ud83d\uddc2\ufe0f</li> <li>Added a favicon. \ud83d\udc85</li> </ul>"},{"location":"new/#bug-fixes","title":"Bug Fixes:","text":"<ul> <li>Updates Grafana docker compose to not use root. \ud83d\udeab\ud83d\udc64</li> <li>Cleans up containers and ensures all are amd64 (not arm!). \ud83d\udcbb</li> <li>Fixes a bug to get the cmd window to stay open after running a command, despite attempts to use parameters to get it to stay open. \ud83e\ude9f</li> <li>Cmd now stays open, but this can have different outcomes based on the types of commands passed in, plus ghosts will reap windows in order to save on machine resources, so a used command window won't always be there later. \u2699\ufe0f</li> <li>New improved RDP, fixes an array of different connectivity bugs. \ud83c\udf10</li> <li>Fixes bugs in delay before and after with fixed integer/long values over int maximum. \ud83d\udd22</li> <li>Adds \"log\" level to application logs. \ud83d\udcdd</li> <li>Fixes documentation bug in machine group timelines. \ud83d\udc1b</li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":"No Compilers Necessary <p>This section details the installation and configuration of GHOSTS from precompiled binaries for both the server and the client.</p> <p>If you are just checking out the project for the first time and want to see NPCs performing activities, skip to the client section below. Otherwise, it is easier to install the API first and then a client that will connect to that installed API instance.</p>"},{"location":"quickstart/#ghosts-api-server","title":"GHOSTS API Server","text":"<p>Easy installation requires:</p> <ol> <li>Install \ud83d\udc33 Docker</li> <li>Install Docker Compose</li> <li> <p>We'll use this docker-compose.yml file in the following command block which will download the required containers will automatically. The commands to stand up the GHOSTS API containers is:</p> <pre><code>mkdir ghosts-api\ncd ghosts-api\ncurl https://raw.githubusercontent.com/cmu-sei/GHOSTS/master/src/Ghosts.Api/docker-compose.yml -o docker-compose.yml\ndocker-compose up -d\n</code></pre> </li> <li> <p>Once the command completes, if you open http://localhost:5000/ in your browser, you should see the initial API page outlining the version of the install, and a few test machine entries. If this page renders, your API is up, running, and available. If the page does not render, follow the advice in the API troubleshooting section.</p> </li> </ol> <p>You will still need to set up Grafana. Beware that you must often <code>chown g_data</code>, which is the host location for the Graphana container as listed in the docker-compose file. Otherwise, the Grafana container will just continually restart in error due to insufficient permissions (detailed in API troubleshooting).</p>"},{"location":"quickstart/#ghosts-clients","title":"GHOSTS Clients","text":"<p>For any of the clients utilizing the browser, an automation driver is necessary to be included in the same folder as the GHOSTS binary. For Firefox, download the appropriate \ud83e\udd8e Geckodriver for your version of the browser here. For Chrome, download the appropriate  Chromedriver for your version of the browser here.</p> <p>Note there are additional configuration steps for  Outlook email automation.</p> <p>The GHOSTS client should typically be run as a specific user, and not as an administrator or root account.</p>"},{"location":"quickstart/#windows-client","title":"Windows Client","text":"<ol> <li>Your client machine will need to have (at least) the Microsoft DotNet 4.6.1 runtime installed. You do not need the full SDK.</li> <li>Download the latest Windows client.</li> <li>Unzip to your client machine in a directory such as <code>c:\\exercise\\ghosts</code>. You will need to adjust the configuration in <code>config/application.json</code> for your client to talk to the already installed API server from above.</li> </ol>"},{"location":"quickstart/#linux-client","title":"Linux Client","text":"<ol> <li>Your client Linux machine will need to have version 6 of the Microsoft dotnetcore runtime installed. Again, note that you only need the runtime installed, not the full SDK.</li> <li>Download the latest Linux client zip file. Unzip to a folder such as ~/ghosts for the user that you want GHOSTS to run as.</li> </ol> <p>Note that on Linux machines running the client as root and utilizing web browsing may result in failures due to Gecko/Chromedriver display issues.</p>"},{"location":"advanced/","title":"GHOSTS Advanced Features Overview","text":"<p>The SEI is a research institute, and so we often are thinking about how to use GHOSTS in new ways to drive insight for our customers. Some of this work makes it here, with the caveat that it might be early beta editions or require some amount of engineer hand-holding in its current state. Some call it pre-release, we call it advanced features.</p>"},{"location":"advanced/cyclone/","title":"GHOSTS CYCLONE Overview","text":"Unreleased <p>Coming soon</p>"},{"location":"advanced/enchanter/","title":"GHOSTS ENCHANTER Overview","text":"Unreleased <p>Coming soon</p>"},{"location":"advanced/necromancer/","title":"GHOSTS NECROMANCER Overview","text":"Unreleased <p>Coming soon</p>"},{"location":"animator/","title":"GHOSTS ANIMATOR Overview","text":"GHOSTS ANIMATOR Source Code <p>The GHOSTS ANIMATOR Source Code Repository is hosted on GitHub, but has been archived.</p> <p>Animator has been baked into the main GHOSTS API. Any development on features listed here will be done in the main GHOSTS repository.</p> <p>Animator brings NPCs to life in two ways:</p> <ol> <li> <p>Initial Creation</p> <p>Animator creates the initial NPC profile, including details such as name, address, career, finances, and family members. Based on configuration, it can place users in a multi-level organizational structure, and establish relationships between users.</p> </li> <li> <p>Animation Jobs</p> <p>Via jobs that can be run during training and exercise events, Animator can update the NPC's preferences, beliefs, and relationships. This enables dynamic NPCs that change over time.</p> </li> </ol> <p>At its core, Animator is a realistic user detail generator. Its primary function is to create sufficiently realistic identities and accompanying verbose portfolios of personal information. Each generated user, or NPC (Non-Player Character) as we call them, has numerous categories of details associated with them, and a great deal of metadata that define who they are. Each piece of information is generated using sourced datasets in an attempt to distribute characteristics realistically. We like to say it creates, \"NPCs so real, they sell for a premium on the dark web.\"<sup>1</sup></p>"},{"location":"animator/#quick-start","title":"Quick Start","text":"<pre><code>git clone &lt;https://github.com/cmu-sei/GHOSTS-ANIMATOR&gt;\ncd ghosts-animator/src\ndocker build . -t ghosts/animator\ndocker compose up -d\n</code></pre> <p>or if you don't want to build and just run the latest docker-compose file:</p> <pre><code>mkdir ghosts-animator\ncd ghosts-animator\ncurl https://github.com/cmu-sei/GHOSTS-ANIMATOR/blob/master/src/docker-compose.yml -o docker-compose.yml\ndocker compose up -d\n</code></pre> <p>Note, most configuration that you may want to change is located in ./config, and so you can mount that directory to your local machine and make changes there.</p> <p>Now browse to http://localhost:5000/</p>"},{"location":"animator/#using-animator-to-create-npcs","title":"Using Animator to Create NPCs","text":"<p>The data generated by Animator can be leveraged in multiple areas, but is particularly applicable in four key areas:</p> <ol> <li> <p>Training Machine Learning Algorithms - Animator creates larges sets of hyper-realistic user data. It can be leveraged to generate data sets that can be used for training machine learning algorithms. This enables the rapid training of anthropology-related ML algorithms that can leverage one or more of the hundred-plus data points generated by Animator.<sup>2</sup></p> </li> <li> <p>Honeypot Payloads - NPC details generated by Animator are designed to be as realistic as possible given the available relevant open source information. This makes the user data convincingly real while still being completely fabricated. Therefore, the data is ideal for use in applications like honeypots, where the goal is to trick an attacker into thinking they are compromising an asset with real user data. This data is also perfect for any other application that would benefit from extremely realistic user information.</p> </li> <li> <p>Insider Threat Modeling - Each Animator NPC is given an Insider Threat Profile. This profile determines how likely it is that the NPC is an insider threat by incorporating the CDSE's Insider Threat Potential Indicators. As we continue developing Animator, it will be possible to configure NPCs to be more or less likely to be insider threats based on factors like their finances, criminal history, foreign contacts, and mental health.</p> </li> <li> <p>Social Network and Relationship Modeling - Animator can establish relationships between the NPCs it generates. As we increase the fidelity of inter-NPC relationships, Animator NPCs create larger and more realistic social networks. By leveraging Animator's ability to quickly generate thousands of inter-related NPCs, Animator can easily be used to perform social networking modeling and research.</p> </li> </ol>"},{"location":"animator/#how-creating-npcs-works","title":"How Creating NPCs Works","text":"<ul> <li>Once Animator receives a request to create NPCs, it starts by creating an empty NPC Profile.</li> <li>Animator then iterates through all 100+ data points for the NPC and generates synthetic data to be associated with that NPC.</li> <li>Example data points are name, address, mental health, career, finances, and family members.</li> <li>Data points are either generated at random or are generated using weighted randomization. Weighted randomization involves leveraging verified datasets to influence the distribution of randomly generated data points to match much more closely to reality.</li> <li>Animator will complete this process for as many users as were selected by the request. This information can be exported through the API, or stored in a local database</li> </ul> <p>Animator currently supports storing NPC data in a local Mongo Database. This feature is still being actively improved.</p> <ol> <li> <p>The GHOSTS development team highly recommends Nick Bilton's book American Kingpin for insight into the early days of the dark web.\u00a0\u21a9</p> </li> <li> <p>A key developer from the Animator team went on to a position in the SEI's AI division. AI models need data. You connect the dots.\u00a0\u21a9</p> </li> </ol>"},{"location":"animator/jobs/","title":"Animation Jobs","text":"<p>So, now we have Animator-generated NPCs, and they have profile information and preferences.</p> <p>Animator has a job system that might enables us to push our simulation further:</p> <ul> <li>What motivates an agent?</li> <li>What does an agent know and how did they learn that? How does their knowledge grow over time?</li> <li>What relationships does an agent have off-network? How might this influence what they do on the computer?</li> <li>What does an agent believe? How did they come to that belief?</li> </ul> <p>Jobs operate on a \"per cycle\" or \"step\" basis. For each cycle, the job processes a list of agents, and the actions or determinations programmed for each.</p>"},{"location":"animator/jobs/#decision-making-framework","title":"Decision-Making Framework","text":"<p>We can use any combination of the following to drive agent decision-making:</p>"},{"location":"animator/jobs/#motivation","title":"Motivation","text":"<p>We implement the Reiss Motivational Profile (RMP) - which is a mathematical framework for reasoning about agent comparative motivations - agent A is twice as motivated by X than agent B - that is baselined every few years. </p>"},{"location":"animator/jobs/#relationships","title":"Relationships","text":"<p>Agents build relationships with other agents in the cohort. These get better or worse over time.</p> <p>How this works is that each agent has the potential to interact with n other agents (they can also potentially transfer knowledge as a result). The more an agent knows about a particular subject, maybe the more likely they are to transfer information to another agent.</p>"},{"location":"animator/jobs/#knowledge","title":"Knowledge","text":"<p>Agents build knowledge across an array of subjects that may alter their preferences. Within Animator, there are two main ways to learn:</p> <ul> <li>Independently through study or by utilizing resources such as books or videos</li> <li>Through relationships with others at the coffee counter, through mentorship, or group-based learning (a classroom or team for example). Here NPCs learn via interactions with other agents, and the system tracks what was learned and from whom.</li> </ul>"},{"location":"animator/jobs/#belief","title":"Belief","text":"<p>What an agent believes can directly influence their behavior. Beliefs shape understanding of the world and guide decision-making and problem-solving. Agents come to belief utilizing Bayes Theorem, which is a mathematical framework for reasoning about probability of evidence.</p> <p>So what does this all mean? Here is an example where an agent shares bits of information on social media:</p> <p>Some tweets contain no insight about the agent. Some disclose some bit of information:</p> <ul> <li>Agent knows X fact</li> <li>Agent interacted with Y agent</li> <li>Agent decided to disclose some personal detail Z</li> </ul> <p>Other agents \u2014 and adversaries \u2014 can see and infer from this information!</p>"},{"location":"animator/jobs/#animator-jobs","title":"Animator Jobs","text":"<p>There are several jobs currently configurable within the Animator system.</p>"},{"location":"animator/jobs/#social-graph","title":"Social Graph","text":"<p>This job is responsible for creating and maintaining the social graph of the agents. It is responsible for creating the initial graph, and then updating it as agents interact with each other, and learn different knowledge types.</p>"},{"location":"animator/jobs/#social-belief","title":"Social Belief","text":"<p>This job is responsible for creating and maintaining the bayesian social belief of the agents. It is responsible for creating the initial belief, and then updating it as agents interact with each other, and learn different knowledge types.</p> The following are still early beta <p>Here be dragons</p> <p>The following run with Animator's use of faker to generate content, but really begin to shine when hooked to a Large Language Model (LLM), either hosted as a cloud service or locally.</p>"},{"location":"animator/jobs/#social-sharing","title":"Social Sharing","text":"<p>This job has agents create and post content on social media. It is responsible for creating the initial share based on the agent and their history. After creating a reasonable thing that agent would say on social media, Animator sends an activity to the GHOSTS API proper to send down to the agent to execute.</p>"},{"location":"animator/jobs/#chat","title":"Chat","text":"<p>This job has agents chat with each other on an OSS chat platform. It is responsible for creating the initial chat based on the agent and their history. After creating a reasonable thing that agent would say on social media, Animator sends an activity to the GHOSTS API proper to send down to the agent to execute. </p>"},{"location":"animator/jobs/#full-autonomy","title":"Full Autonomy","text":"<p>This has agents get their next instruction directly from an LLM, based on who they are and their history. While GHOSTS can execute many of these activities, some activty generated will be beyond the scope of this project, but its inclusion can provide rich histories from which to generate future activities. With a powerful LLM, this generates some exceptionally real activities, but can also be hard to control for the training and exercise audience. </p> <p>Initial work in LLM-driven autonomous GHOSTS agents was documented in our technical report titled Simulating Realistic Human Activity Using Large Language Model Directives.</p>"},{"location":"animator/jobs/#getting-started-with-llm-driven-ghosts-npcs","title":"Getting Started With LLM-Driven GHOSTS NPCs","text":"<p>The following is a quick start guide to getting LLM-driven GHOSTS NPCs up and running. This guide assumes you have already installed the GHOSTS API and Animator, and have a working LLM. If you do not have an LLM, you might consider Ollama \u2014 which is very easy to setup and run on Apple Silicon (and where most reasonable models run very fast).</p> <p>The process to stand up and use Ollama is:</p> <ul> <li>Download and install Ollama. Get familiar with creating your own custom models.</li> <li>Create a model for the job you want to run. These are stored in content-models within the Animator project.</li> <li>Run the commands to create the applicable model (chat for example):</li> </ul> <pre><code>cd chat\nollama create chat\nollama run chat\n</code></pre> <ul> <li>You can test the model right in the terminal by interrogating it with quesitons that an NPC might generate.</li> <li>But also note that Ollama automatically creates an API enpoint for the LLM at http://localhost:11434. This is the endpoint Animator will call for content.</li> <li>Ensure your content settings for the applicable job reference your newly running model:</li> </ul> <pre><code>    \"ContentEngine\": {\n        \"Source\": \"ollama\",\n        \"Host\": \"http://localhost:11434\",\n        \"Model\": \"chat\"\n    }\n</code></pre> <ul> <li>You can run multiple models at the same time, but this may be a performance issue. You can also run multiple models on different machines, and point the Animator content settings to the applicable machine.</li> </ul>"},{"location":"animator/run/","title":"Running Animator Animations","text":"<p>Animator is a simulation of a population of agents. Animator runs in cycles, and for each cycle, the agents make decisions based on their attributes, preferences, motivations, and behaviors.</p>"},{"location":"animator/run/#setup","title":"Setup","text":"<ul> <li>Get the Animator API up and running as outlined here</li> <li>The <code>appsettings.json</code> file points to Animator-specific configuration, which by default is in <code>./config/config.json</code>:</li> </ul> <pre><code>  {\n    \"ApplicationDatabaseSettings\": {\n      \"ConnectionString\": \"mongodb://ghosts-mongo:32770\",\n      \"DatabaseName\": \"AnimatorDb\"\n    },\n    \"ApplicationSettings\": {\n      \"GhostsApiUrl\": \"http://localhost:52388/\", //the root url of the Ghosts API\n      \"Proxy\": \"\",\n      \"Animations\": {\n        \"IsEnabled\": false, //if false, then all animations are disbled\n        \"SocialGraph\": {\n          \"IsEnabled\": false, //if false, just this animation is disabled\n          \"IsMultiThreaded\": true, //helpful to set to false for debugging purposes\n          \"IsInteracting\": true, //means new agent interactions are being generated\n          \"MaximumSteps\": 4000, //max steps to execute\n          \"TurnLength\": 9000, //ms per step\n          \"ChanceOfKnowledgeTransfer\": 0.3, //chance that an agent will share knowledge with another agent\n          \"Decay\": {\n            \"StepsTo\": 10, //min steps to execute before an agent begins forgetting things\n            \"ChanceOf\": 0.05\n          }\n        },\n        \"SocialBelief\": {\n          \"IsEnabled\": false,\n          \"IsMultiThreaded\": true,\n          \"IsInteracting\": true,\n          \"MaximumSteps\": 300,\n          \"TurnLength\": 9000\n        },\n        \"SocialSharing\": {\n          \"IsEnabled\": false,\n          \"IsMultiThreaded\": true,\n          \"IsInteracting\": true,\n          \"IsSendingTimelinesToGhostsApi\": false,\n          \"IsSendingTimelinesDirectToSocializer\": true,\n          \"PostUrl\": \"http://localhost:8000\",\n          \"MaximumSteps\": 100,\n          \"TurnLength\": 9000,\n          \"ContentEngine\": {\n            \"Source\": \"ollama\",\n            \"Host\": \"http://localhost:11434\",\n            \"Model\": \"chat\"\n          }\n        },\n        \"Chat\": {\n          \"IsEnabled\": false,\n          \"IsMultiThreaded\": true,\n          \"IsInteracting\": true,\n          \"MaximumSteps\": 300,\n          \"TurnLength\": 9000,\n          \"IsSendingTimelinesToGhostsApi\": false,\n          \"PostUrl\": \"http://localhost:8065\",\n          \"ContentEngine\": {\n            \"Source\": \"ollama\",\n            \"Host\": \"http://localhost:11434\",\n            \"Model\": \"chat\"\n          }\n        },\n        \"FullAutonomy\": {\n          \"IsEnabled\": false,\n          \"IsMultiThreaded\": true,\n          \"IsInteracting\": true,\n          \"IsSendingTimelinesToGhostsApi\": false,\n          \"MaximumSteps\": 10000,\n          \"TurnLength\": 9000,\n          \"ContentEngine\": {\n            \"Source\": \"ollama\",\n            \"Host\": \"http://localhost:11434\",\n            \"Model\": \"activity\"\n          }\n        }\n      }\n    },\n    \"AllowedHosts\": \"*\",\n    \"ClientSettings\": {\n    },\n    \"CorsPolicy\": {\n      \"Origins\": [\n        \"http://localhost:4200\"\n      ],\n      \"Methods\": [],\n      \"Headers\": [],\n      \"AllowAnyOrigin\": false,\n      \"AllowAnyMethod\": true,\n      \"AllowAnyHeader\": true,\n      \"SupportsCredentials\": true\n    }\n  }\n  ...\n</code></pre> <p>After you update the appsettings.json file, you will need to restart the Animator API server via:</p> <pre><code>docker restart animator-api\n</code></pre>"},{"location":"content/","title":"GHOSTS Content Servers Overview","text":"<p>GHOSTS content servers are an evolving part of the framework. They exist for several reasons:</p> <ol> <li>On an air-gapped network, where we are simulating some subset of the internet, we want more types of browsable content within that range \u2014 documents, spreadsheets, presentations, pdf files, streamed movies, and the like.</li> <li>We want a broad range of URLs within a site we are representing in the range.</li> <li>We want to simulate a document store, such as SharePoint, OneCloud, or similar, but without the hassle of installing and maintaining those actual systems.</li> </ol> <p>Research by Global WebIndex claims that globally, 59% of the world's population uses social media, and that the average daily use is 2 hours and 29 minutes (July 2022).</p>"},{"location":"content/#air-gapped-networks","title":"Air-gapped networks","text":"<p>Many ranges have no access to the wider internet. In these cases, recreating a reasonable facsimile of the internet is key to the training experience. While there are many systems that do this well, we often want to augment the scenario with a wider array of URL traffic, or we want to introduce more of certain kinds of content going across the wire. PANDORA was created to address these concerns. Shortly later, we added a social server as well.</p>"},{"location":"content/#having-to-know-valid-urls","title":"Having to know valid URLs","text":"<p>The other problem is that the internet works by the client having to \u201cknow\u201d the location of some resource via:</p> <ul> <li>Actually knowing the URL</li> <li>Being referred from another page - I might know google.com and search for something, which gives me a reference to another page I was not aware of previously.</li> <li>Inferring the URL from some like resource - If one is poking around and looking for something on a server, a slight change of URL often gives hints that get you to where you wanted to go.</li> <li>Guessing - the proliferation of .com domains means that for something new, it's often fruitful to just try that thing.com and see if it works!</li> </ul> <p>The problem here is that currently, clients must know valid URLs that actually exist out in a simulated greyspace (via TopGen, GreyBox, or otherwise), which limits the array of potential requests and creates range work to maintain. So we created GHOSTS PANDORA, which serves whatever clients ask for - if the request is for a doc file, the server creates a random doc file on the fly \u2014 in memory \u2014 and serves it back to the client. Pandora serves the following content types: </p> <ul> <li>html</li> <li>css</li> <li>js</li> <li>doc|x</li> <li>ppt|x</li> <li>xls|x</li> <li>mp4</li> <li>pdf</li> <li>gif</li> <li>jpg</li> <li>png</li> <li>zip</li> <li>msi</li> <li>iso</li> <li>other binary formats, etc. </li> </ul> <p>Pandora has generic request handlers for each HTTP verb (GET, POST, etc.) and is deployed as a simple docker container. We configure it to handle a particular IP on a multiple-IP-enabled host machine. It works off any URL, but part of the solution involved introducing more randomness in the GHOSTS clients as well. Those clients now support a creative parameter-built URL system that can be configured to look something like this:</p> <pre><code>sharepoint.hello.com/{org}/{report_type}/{uuid}/{file_name}.{file_type}\n</code></pre> <p>These variables are processed at runtime, and produce a final url that might look something like:</p> <pre><code>sharepoint.hello.com/operations/maintenance/80e6af4e-5107-43b5-832f-0d8027efbd76/report.docx\n</code></pre> <p>In addition, Pandora supports \u201cbad\u201d payloads via configuration. Here the server responds to specific configured URLs to deploy planted injects. So clients can download malware in an exercise in a manner that is hard to differentiate based on URLs already seen within the event. The configuration looks like:</p> <pre><code>[payloads]\n1=/bad/payload/url/,some_bad.zip,application/zip\n</code></pre> <p>Where id=url,payload file, MIME response type.</p>"},{"location":"content/pandora/","title":"GHOSTS PANDORA SERVER Overview","text":"Pandora is part of GHOSTS <p>Pandora is within the GHOSTS Source Code Repository hosted on GitHub.</p> <p>GHOSTS PANDORA is a web server that responds to a myriad of request types with randomized content generated in real-time. Used in conjunction with GHOSTS NPCs, the two can provide for agents that are periodically downloading content other than simple HTML and associated image, CSS, and js files.</p> <p></p>"},{"location":"content/pandora/#running-this-server","title":"Running this server","text":""},{"location":"content/pandora/#as-a-docker-container","title":"As a Docker Container","text":"<p>Docker is the preferred way to run Pandora - mostly because this is how we run and test it before version releases.</p> <ol> <li>Review the repository docker-compose.yml file</li> <li>Run the following in your terminal </li> </ol> <pre><code>mkdir ghosts-pandora\ncd ghosts-pandora\ncurl https://raw.githubusercontent.com/cmu-sei/GHOSTS/master/src/ghosts.pandora/docker-compose.yml -o docker-compose.yml\ndocker-compose up -d\n</code></pre>"},{"location":"content/pandora/#bare-metal","title":"Bare metal","text":"<p>This assumes the host server is a common Linux distribution. For images to render correctly, PIL or the more recent Pillow library is necessary. See here for more information on Pillow installation and configuration.</p> <ol> <li>Using a Python 3 distribution &gt;= 3.6.2</li> <li>In the terminal run: <code>pip install -r requirements.txt</code></li> <li>Then run <code>python app.py</code></li> </ol>"},{"location":"content/pandora/#capabilities","title":"Capabilities","text":""},{"location":"content/pandora/#handling-requests-by-directory","title":"Handling requests by directory","text":"<ul> <li>/api - All requests beginning with <code>/api</code> automatically respond with json. This includes:<ul> <li><code>/api/users</code></li> <li><code>/api/user/a320f971-b3d9-4b79-bb8d-b41d02572942</code></li> <li><code>/api/reports/personnel</code></li> </ul> </li> <li>/csv - All requests beginning with <code>/csv</code> automatically respond with csv. Like the above, this includes urls such as:<ul> <li><code>/csv/users</code></li> <li><code>/csv/user/winx.jalton</code></li> <li><code>/csv/reports/HR/payroll</code></li> </ul> </li> <li>/i, /img, /images - All requests beginning with these directories automatically respond with a random image of type [gif, jpg, png]. Examples:<ul> <li><code>/i/v1/a9f6e2b7-636c-4821-acf4-90220f091351/f8f8b1f0-9aa5-4fc7-8880-379e3192748e/small</code></li> <li><code>/images/products/184f3515-f49b-4e07-8c8b-7f978666df0e/view</code></li> <li><code>/img/432.png</code></li> </ul> </li> <li>/pdf - All requests respond with a random pdf document. Examples:<ul> <li><code>/pdf/operations/SOP_Vault/a7f48bd5-84cb-43a1-8d3d-cd2c732ddff6</code></li> <li><code>/pdf/products</code></li> </ul> </li> <li>/docs - All requests respond with a random word document</li> <li>/slides - All requests respond with a random powerpoint document</li> <li>/sheets - All requests respond with a random excel document</li> </ul>"},{"location":"content/pandora/#handling-requests-by-type","title":"Handling requests by type","text":"<p>For requests indicating a specific file type, there are several specific handlers built to respond with that particular kind of file, such as:</p> <ul> <li>.csv</li> <li>Image requests [.gif, .ico, .jpg, .jpeg, .png]</li> <li>.json</li> <li>Office document requests</li> <li>.doc, .docx</li> <li>.ppt, .pptx</li> <li>.xls, .xlsx</li> <li>.pdf</li> </ul> <p>So that a URL such as <code>/users/58361185-c9f2-460f-ac45-cb845ba88574/profile.pdf</code> would return a pdf document typically rendered right in the browser.</p> <p>All unhandled request types, urls without a specific file indicator, or requests made outside specifically handled directories (from the preceding section) are returned as html, including:</p> <ul> <li><code>/docs/by_department/operations/users</code></li> <li><code>/blog/d/2022/12/4/blog_title-text</code></li> <li><code>/hello/index.html</code></li> </ul>"},{"location":"content/pandora/#hiding-malicious-payloads-for-red-teaming","title":"Hiding malicious payloads for red-teaming","text":"<p>Pandora also can hide payloads in a particular request for things like red-teaming and such. This is done in the configuration file, and looks like this:</p> <pre><code>[payloads]\n1=/1/,a.zip,application/zip\n2=/2/users,b.zip,application/zip\n3=/3/some/report/url,c.zip,application/zip\n</code></pre> <p>Each record must be an incrementing integer with no duplication. The values are:</p> <ul> <li>The URL that this payload responds to</li> <li>The local file (stored in <code>./payloads/</code>) to be returned</li> <li>The MIME type of the response</li> </ul> <p>So for 1 in the example above, requests to /1/ return the a.zip file as an application/zip file.</p>"},{"location":"content/social/","title":"GHOSTS PANDORA SOCIAL Overview","text":"PANDORA SOCIAL is still very early beta <p>Here be dragons</p> <p>The place where GHOSTS agents come to share their thoughts and information.</p> <p>In the spirit of the original PANDORA, this server also responds to a very broad array of URLs but enables clients to POST/PUT/DELETE to it as well, for example:</p> Request Response <code>POST</code> /images  responds with a url to the saved image file <code>POST</code> /  responds with a randomly-generated streamed video <code>POST</code> /users/michelle_smith/af2d00aa-4a89-4af3-baff-1746b556e7a1/  responds with a reply to the original user's social post"},{"location":"core/api/","title":"Setting Up the GHOSTS API","text":"GHOSTS Source Code <p>The GHOSTS Source Code Repository is hosted on GitHub.</p> <p>Updated on July 24, 2024</p> <p>The GHOSTS API enables the control and orchestration of non-player characters (NPCs) within a deployment. It supports logging, reporting, and managing individual, groups of, or entire deployments of client installs.</p> <p>The GHOSTS API consists of three components: the API itself for configuring and managing characters and machines, a Postgres database for managing all the pieces, and Grafana for seeing GHOSTS activities in one convenient dashboard. Each of these three components runs in its own docker container.</p> <p>Steps to set up the GHOSTS API:</p> <ol> <li>Choose where to host the API</li> <li>Install Docker and Docker Compose</li> <li>Build the GHOSTS containers</li> <li>Test the API</li> </ol>"},{"location":"core/api/#step-1-choose-where-to-host-the-api","title":"Step 1 \u2014 Choose Where to Host the API","text":"<p>Choose the machine you'll be using to host the GHOSTS API. If you're just playing around with the GHOSTS, your local machine is fine. If you're configuring an exercise or simulation that other people might care about, consider creating a dedidicate host (server, image, or virtual server) for the API, or even using a container service such as AWS ECS.</p>"},{"location":"core/api/#step-2-installing-docker","title":"Step 2 \u2014 Installing Docker","text":"<p>You'll need to install Docker and Docker Compose on your API host.</p> <p>First, install \ud83d\udc33 Docker.</p> <p>Next, install Docker Compose which will assist with starting up multiple containers at the same time.</p> <p>Before continuing, test that you have the command for Docker Compose available.</p> <p>Open your system's CMD (Linux), Terminal (Mac), or PowerShell (Windows).</p> <pre><code>$ docker-compose --version\n</code></pre>"},{"location":"core/api/#step-3-installing-the-ghosts-api","title":"Step 3 \u2014 Installing the GHOSTS API","text":"<p>Once you have confirmed that Docker and Docker Compose are installed, you can build the containers required for the GHOSTS API.</p> <p>Create a directory where you want to store the build files and containers.</p> <pre><code>$ mkdir ghosts-project\n$ cd ghosts-project\n</code></pre> <p>Download the docker compose file for GHOSTS.</p> <pre><code>$ curl https://raw.githubusercontent.com/cmu-sei/GHOSTS/master/src/Ghosts.Api/docker-compose.yml -o docker-compose.yml\n</code></pre> <p>Build all of the containers at once using docker-compose.</p> <pre><code>$ docker-compose up -d\n</code></pre> <p>Check for the running containers.</p> <pre><code>$ docker ps -a\n</code></pre> <p>If everything succeeds you should see the three new containers for the API, Grafana, and Postgres.</p> <p></p>"},{"location":"core/api/#step-4-testing-the-api","title":"Step 4 \u2014 Testing the API","text":"<p>By default, the API is hosted on port 5000. You should be able to reach the API from http://localhost:5000. If you open this page in your browser, you should see the initial API page outlining the version of the install, and a few test machine entries. If this page renders, your API is up, running, and available.</p> <p></p>"},{"location":"core/api/#troubleshooting","title":"Troubleshooting","text":""},{"location":"core/api/#problem-the-api-home-page-has-an-error","title":"Problem: The API home page has an error","text":"<p>Answer: Make sure the docker container for Postgres is running using Docker Desktop or the command <code>docker ps -a</code></p> <p></p> <p>You can check the logs with the command <code>docker logs ghosts-postgres</code> to look for container errors.</p>"},{"location":"core/api/#problem-the-social-graph-link-has-an-error","title":"Problem: The social graph link has an error","text":"<p>Answer: You haven't created a social network yet, this is normal.</p>"},{"location":"core/api/#problem-is-the-api-up-and-running","title":"Problem: Is the API up and running?","text":"<ul> <li>Go to <code>/api/home</code> in the browser, it should return the current API version and the number of machines and groups under management. If it says relationship not found, restart the API application and it should create the database automatically.</li> <li>Run <code>docker ps --all</code> and see that all containers are running normally. If one or more is not running, look at the logs for that machine via <code>docker logs [machine name]</code>.</li> </ul> <p>The ClientId, ClientResults, and other Client* endpoints are failing.</p> <p>The Client* endpoints are for the Clients to use only. There are specific header values set by the client in the request that is used to authenticate the request. If you are not using the client, you will not have these headers set, and these endpoints will fail.</p>"},{"location":"core/client/","title":"GHOSTS Client Overview","text":"GHOSTS Source Code <p>The GHOSTS Source Code Repository is hosted on GitHub.</p> <p>The GHOSTS client simulates what anyone might do at a computer given their particular role or membership within some team. It creates documents, browses websites, downloads files, and uses all sorts of popular applications on many versions of Windows and Linux machines. Whether you're a friendly administrator or a powerful cyber adversary, GHOSTS can replicate your expected behavior.</p> <p></p> <p>GHOSTS has many use cases in cyber training and exercises, most notably for bringing non-player characters (NPCs) to life, but it can also be used for other purposes where realistic activity on a computer or network is needed - testing or generating datasets, for example.</p> Do I need the API? <p>Although clients are fully functional without the API server, the latter enables logging, reports, and remote administration capabilities. Without the API, changes to clients must be managed in some other manner.</p> <p>The client's configuration and command system are file-based, so if you do not wish to use the API, you can manage these through some other tool, such as Ansible or similar. All of these files are under the client's install location.</p> Run as the NPC you're representing <p>The GHOSTS client should typically be run as a user, and not as administrator or root - training or exercising teams will notice this immediately.</p>"},{"location":"core/client/#the-windows-client","title":"The Windows Client","text":"<p>GHOSTS on Windows (Win7, 10, 11, and corresponding server versions, such as 2022, etc. are currently supported) is a .NET Console application that performs user activity on client workstations - web browsing, working with office documents, using the command prompt or PowerShell, etc. Our team typically installs the client in an out-of-game directory (<code>c:\\exercise\\ghosts\\</code>), where no event or injects will originate. It is recommended you verify one working client before deploying to multiple machines. You will need the base URL from the API installation for the client to communicate home.</p>"},{"location":"core/client/#windows-installation","title":"Windows Installation","text":"<ul> <li> <p>Your client Windows machine will need to have (at least) the Microsoft DotNet 4.6.1 runtime installed . Again, note that you only need the runtime, not the full SDK. We continue to use 4.6.1 on Windows to maintain backward compatibility.</p> </li> <li> <p>Download the appropriate latest client</p> </li> </ul> <p>Unzip to your client machine in a directory such as <code>c:\\exercise\\ghosts</code>. You will need to adjust the configuration in <code>config/application.json</code> for your client to talk to your an installed instance of the GHOSTS API server.</p> Additional configuration required for web browsing <p>For any client utilizing the Firefox or Chrome web browser, an automation driver is necessary to be included in the same folder as the GHOSTS binary. For Firefox, download the appropriate \ud83e\udd8e\u00a0 Geckodriver for your version of the browser here . For Chrome, download the appropriate Chromedriver for your version of the browser here .</p> Additional configuration required for email <p>Using the Windows client email functions requires the use of Redemption  which provides robust Outlook automation. The full Redemption library should be found in <code>/lib</code>.</p>"},{"location":"core/client/#linux-client","title":"Linux Client","text":"<p>Your client Linux machine will need to have the latest Microsoft dotnetcore runtime version 8.0  installed. Again, note that you only need the runtime installed, not the full SDK. Our testing has been with Ubuntu 24.04 using the snap instructions here, but other distributions should work as well.</p>"},{"location":"core/client/#linux-installation","title":"Linux Installation","text":"<ul> <li>Download the latest Linux client</li> </ul> <p>Unzip to a folder such as <code>~/ghosts</code> for the user that you want GHOSTS to run as.</p> <p>Note that on Linux machines running the client as root and utilizing web browsing may result in failures due to Gecko/Chromedriver display issues.</p>"},{"location":"core/client/#client-directory-structure","title":"Client Directory Structure","text":"Do not copy the instance folder <p>You should never copy the <code>instance</code> folder from one machine to another.</p> Folder Description <code>config/</code> configuration files are stored here. <code>instance/</code> generated files and information relative to this particular installed instance of ghosts is stored here. This folder should never be copied from one machine to another <code>lib/</code> third-party libraries used by ghosts are stored here <code>logs/</code> output logs for the installed instance (logs/app.log), and logs that are transferred to the server (<code>logs/clientupdates.log</code>)"},{"location":"core/client/#configuration-quick-start","title":"Configuration Quick Start","text":"<p>After unzipping the GHOSTS client, we can simply double-click it to run. Note that the console window likely printed a few messages, but then disappeared. This is normal, in production mode GHOSTS hides itself. We can see it in the Windows Task Manager, however, and we can kill the process from there. We can also run the included <code>kill-ghosts.bat</code> file that closes the application and any applications it might control.</p> <p>Beyond this initial step of verifying that the client will run, there are two files that we might need to adjust to fit many deployments:</p>"},{"location":"core/client/#applicationjson","title":"application.json","text":"<p>In this file, often all we need to change are the URLs for the API, IdUrl, ClientResultsUrl, ClientUpdatesUrl, and the like. Change the hostname to your installed API location, and GHOSTS should check in as expected.</p> <pre><code>{\n  \"ApiRootUrl\": \"http://localhost:5000/api\",    // there is now just one api url to change in order to point where you've hosted your api\n  \"Sockets\": {                                  // this is the new websockets configuration, turn it off if you're not using it\n    \"IsEnabled\": true,\n    \"Heartbeat\": 50000\n  },\n  \"Id\": {\n    \"IsEnabled\": true,\n    \"Format\": \"guestlocal\",\n    \"FormatKey\": \"guestinfo.id\",\n    \"FormatValue\": \"$formatkeyvalue$-$machinename$\",\n    \"VMWareToolsLocation\": \"C:\\\\progra~1\\\\VMware\\\\VMware Tools\\\\vmtoolsd.exe\"\n  },\n  \"AllowMultipleInstances\": false,\n  \"EncodeHeaders\": true,\n  \"ClientResults\": {\n    \"IsEnabled\": true,\n    \"IsSecure\": false,\n    \"CycleSleep\": 300000\n  },\n  \"ClientUpdates\": {\n    \"IsEnabled\": true,\n    \"CycleSleep\": 300000\n  },\n  \"Survey\": {\n    \"IsEnabled\": false,\n    \"IsSecure\": false,\n    \"Frequency\": \"once\",\n    \"CycleSleepMinutes\": 5,\n    \"OutputFormat\": \"indent\"\n  },\n  \"Timeline\": {\n    \"Location\": \"config/timeline.json\"\n  },\n  \"Content\": {\n    \"EmailsMax\": 20,\n    \"EmailContent\": \"\",\n    \"EmailReply\": \"\",\n    \"EmailDomain\": \"\",\n    \"EmailOutside\": \"\",\n    \"BlogContent\": \"\",\n    \"BlogReply\": \"\",\n    \"FileNames\": \"\",\n    \"Dictionary\": \"\"\n  },\n  \"ResourceControl\": {\n    \"ManageProcesses\": true\n  },\n  \"HealthIsEnabled\": false,\n  \"HandlersIsEnabled\": true,\n  \"DisableStartup\": false\n}\n</code></pre>"},{"location":"core/client/#timelinejson","title":"timeline.json","text":"<p>The other file we may want to adjust is the default timeline. This is what the agent does all day, including browsing the internet, creating documents, and similar. The defaults hopefully give you a good idea of what is possible, and of course, the array of configurations here is endless - be creative!</p> <p>The primary item is the HandlerType. This tells GHOSTS to run a command (Command), use Firefox to browse an array of websites (BrowserFirefox), create Excel documents (Excel)  and so on. Some of the other items related to a handler's configuration are:</p> <ul> <li>Initial: The initial command for a handler to execute. For a web browser, you might enter either a URL or \"about:blank\".</li> <li>UtcTimeOn | UtcTimeOff: \"00:00:00\": \"24:00:00\" to not shut off. Otherwise, enter an on and an off time to simulate things such as office hours of 9-5, etc. There are 30 minutes of jitter plus or minus from the time entered.</li> <li>Loop: Set this to true to continue to execute this same command on a loop, or false to execute something just one time.</li> </ul> <pre><code>{\n   \"HandlerType\": \"Command\",\n   \"Initial\": \"\",\n   \"UtcTimeOn\": \"00:00:00\",\n   \"UtcTimeOff\": \"24:00:00\",\n   \"Loop\": \"True\",\n   \"TimeLineEvents\": [\n      {\n         \"Command\": \"NETSTAT\",    \n         \"CommandArgs\": [],\n         \"DelayAfter\": 900000,\n         \"DelayBefore\": 0\n      }\n   ]\n}\n</code></pre> <p>To access a network share file, the command might be: net use X:\\SERVER\\Share</p> <p>To RDP to another machine: mstsc.exe {ConnectionFile | /v:ServerName[:Port]} [/console] [/f] [/w:Width/h:Height]</p> <p><code>/v</code> - specifies the remote computer and port (optional) you wish to connect to <code>/console</code> \u2013 connects to the console of a Windows Server 2003 based system <code>/f</code> \u2013 starts the remote desktop connection in full screen mode <code>/w &amp; /h</code> \u2013 specifies the width and height of the remote desktop connection</p> <p>Actions can also be created for standard copy/move/deletion of files via their respective commands.</p> <p>Chrome</p> <p>We have to pass the browser window an initial value. If we don't want it to go anywhere at start, we could pass about:blank, otherwise we'd pass a url. These can be http or https.</p> <pre><code>{\n   \"HandlerType\": \"BrowserChrome\",\n   \"Initial\": \"http://google.com\",\n   \"UtcTimeOn\": \"00:00:00\",\n   \"UtcTimeOff\": \"24:00:00\",\n   \"Loop\": \"True\",\n   \"TimeLineEvents\": [\n      {\n         \"Command\": \"random\",\n         \"CommandArgs\": [\n            \"http://google.com\",\n            \"http://facebook.com\",\n         ],\n         \"DelayAfter\": 1000,\n         \"DelayBefore\": 0\n      }\n   ]\n}\n</code></pre> <p>Excel, PowerPoint, Word</p> <pre><code>{\n   \"HandlerType\": \"Word\",\n   \"Initial\": \"\",\n   \"UtcTimeOn\": \"00:00:00\",\n   \"UtcTimeOff\": \"24:00:00\",\n   \"Loop\": \"True\",\n   \"TimeLineEvents\": [\n      {\n         \"Command\": \"create\",\n         \"CommandArgs\": [ \"%homedrive%%homepath%\\\\Documents\" ],\n         \"DelayAfter\": 900000,\n         \"DelayBefore\": 0\n      }\n   ]\n}\n</code></pre>"},{"location":"core/client/#trackables","title":"Trackables","text":"<p>For specific Timeline Events where the outcome is needed to be tracked, like for example, a client machine spawned inject, use a Trackable (via TrackableId in the following example):</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"BrowserChrome\",\n            \"Initial\": \"about:blank\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"browse\",\n                    \"CommandArgs\": [ \"https://dl.dafont.com/dl/?f=italian_breakfast\" ],\n                    \"DelayAfter\": 0,\n                    \"DelayBefore\": 0\n                },\n                {\n                    \"Command\": \"download\",\n                    \"CommandArgs\": [ \"//a[contains(@class, 'dl')]\" ],\n                    \"TrackableId\": \"&lt;guid id from trackables table/&gt;\",\n                    \"DelayAfter\": 0,\n                    \"DelayBefore\": 0\n                }\n            ]\n        },\n        {\n            \"HandlerType\": \"Command\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"cd %homedrive%%homepath%\\\\Downloads\",\n                    \"CommandArgs\": [\n                        \"powershell expand-archive -Path italian_breakfast.zip -destinationpath x\",\n                        \"cd x\",\n                        \"dir\"\n                    ],\n                    \"TrackableId\": \"&lt;guid id from trackables table/&gt;\",\n                    \"DelayAfter\": 10,\n                    \"DelayBefore\": 10000\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"core/client/#troubleshooting","title":"Troubleshooting","text":"<p>Clients aren't running (immediately exiting, throwing copious exceptions, or similar)</p> <ul> <li>Is the dotnet framework runtime 4.x installed on the machine?</li> <li>If GPO is doing white-listing of what apps can run, is <code>ghosts.exe</code> white-listed?</li> <li>Will the client run by simply double-clicking on the exe?</li> <li>Does it report anything to the windows application event logs?</li> <li>What's in <code>logs/app.log</code>?</li> <li>Is the ghosts executable set to execute automatically when the machine restarts?</li> <li>Does the nlog.config contain these lines?</li> </ul> <pre><code>AutoLoadExtensions=\"true\"\ninternalLogToConsole=\"true\"\ninternalLogFile=\"logs\\nlog-internal.log\"\ninternalLogLevel=\"Error\"\n</code></pre> <p>If so, be sure this one exists! <code>internalLogFile=\"logs\\nlog-internal.log\"</code></p> <p>Clients aren't reporting their activity to the API</p> <ul> <li>Is the client running correctly? (if not, see above)</li> <li>Is there entries in the logs/clientupdates.log?</li> <li>If there are, is the file too large? (Try removing it, ghosts might be hung trying to process a lot of log data)</li> <li>If the folder <code>instance</code> created? Does the file <code>instance/id.json</code> exist? (If it does and has an ID within, then ghosts has reported home to the api at least once)</li> <li>The file <code>logs/app.log</code> indicating any fatal issues? (Logging can be ratcheted up and down via nlog configuration)</li> </ul> <p>Can I update what clients are doing?</p> <ul> <li>Clients operate off their <code>config/timeline.json</code> file and this can be updated via Powershell, Ansible, or other means - it's just a file.</li> <li>Clients can also do just-in-time activities via the <code>instance/timeline/in</code> folder. Anything placed here will be picked up, executed, and moved to the corresponding out folder once complete. This does not affect any activity currently controlled with the default timeline file.</li> </ul> <p>Can I reset a client on a box?</p> <ul> <li>Yes, launching a new instance of Ghosts kills the previous one and all associated tasks from the timeline (any instances of Word, PowerShell, etc.). Only one instance of Ghosts will be running on a client box at any time. We can also run the .bat script <code>kill-ghosts.bat</code> included in the distribution to clean everything up.</li> </ul> <p>What is the easiest way to determine the running version of the client?</p> <ul> <li>run the version flag: <code>ghosts.exe --version</code></li> </ul>"},{"location":"core/grafana/","title":"Configuring Grafana","text":"<p>Updated on July 25, 2024</p> <p>Grafana for GHOSTS allows the simulation administrator to visualize all activities carried out by the NPCs across the simulation in dashboard with pretty colors and charts.  </p>"},{"location":"core/grafana/#prerequisites","title":"Prerequisites","text":"<ul> <li>Your GHOSTS API should be installed and running (see Setting Up the GHOSTS API)</li> </ul>"},{"location":"core/grafana/#step-1-container-set-up","title":"Step 1 \u2014 Container Set Up","text":"<p>The Grafana docker container will be installed during the process of Setting Up the GHOSTS API. Depending on your system and account, the Grafana container may or may not have the permissions it needs to run.</p> <p>You can check its status with the docker command</p> <pre><code>$ docker ps -a\n</code></pre> <p>If the container is continuously restarting, Grafana does not have the permissions it needs.</p> <p></p> <p>You can also check the docker logs:</p> <pre><code>$ docker logs ghosts-grafana\n</code></pre> <p></p> <p>If you don't see this issue, you can continue to Step 2. If you do see this issue you will need to grant permissions on the <code>_g</code> directory of the ghosts-api folder (which stores the Grafana data for the GHOSTS API).</p> <pre><code>$ cd ghosts-api\n$ chmod 777 _g\n</code></pre> <p>Ensure the container is running with <code>docker ps</code>.</p>"},{"location":"core/grafana/#step-2-configuring-grafana","title":"Step 2 \u2014 Configuring Grafana","text":"<p>Once the container is running you can access its front end by default at localhost:3000</p> <p></p> <p>The default login is:</p> Username Password admin admin <p>Continue through the setup prompts.</p>"},{"location":"core/grafana/#step-3-setting-the-datasource","title":"Step 3 \u2014 Setting the Datasource","text":"<p>Now you need to tell Grafana where it will be getting its data.</p> <ol> <li>Open the \"Connections\" from the left menu.</li> <li>Click on \"Add new data source\" in the top right corner</li> <li>Search for \"Postgres\" and choose the PostgreSQL option</li> <li>Name the datasource \"ghosts\" and leave it as the default</li> <li>Under the \"Connection\" section of the config, set</li> <li>host url to \"ghosts-postgres:5432\"</li> <li>database name to \"ghosts\"</li> <li>Under the \"Authentication\" section of the config, set</li> <li>username to \"ghosts\"</li> <li>password to \"scotty@1\"</li> <li>TLS/SSL Mode to \"disable\"</li> <li>Leave everything else at its default and click the \"Save and test\" button at the bottom of the page</li> </ol>"},{"location":"core/grafana/#step-4-choosing-a-dashboard","title":"Step 4 \u2014 Choosing a Dashboard","text":"<p>Grafana dashboards are very flexible and can be configured to show any statistics that are important to your simulation or experiment.</p> <p>GHOSTS comes with some premade dashboards to get you started. You can download those here: https://github.com/cmu-sei/GHOSTS/tree/master/configuration/grafana/dashboards</p> <ul> <li>GHOSTS-5-default Grafana dashboard \u2014 shows status across all machines</li> <li>GHOSTS-5-group-default Grafana dashboard \u2014 shows status with machines grouped by enclave</li> </ul>"},{"location":"core/grafana/#loading-an-existing-dashboard","title":"Loading an existing dashboard","text":"<p>Navigate to \"Dashboards\" in the left menu. There will be a blue \"New\" button in the top right corner.</p> <p></p> <p>Click \"New\". Then, \"import\". </p> <p>You can either upload one of the dashboard json files from the GHOSTS repository or simply copy and paste the json into the \"import via dashboard json model\" panel.</p> <p>Choose the ghosts datasource you added earlier from the drop down menu and then click \"import\".</p> <p></p> <p>You are now set up with Grafana!</p>"},{"location":"core/handlers/","title":"Basic Handler Configuration","text":"<p>The following is the format for a basic timeline handler:</p> <pre><code>\"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Watcher\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": true,\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"folder\",\n          \"CommandArgs\": [ \"path:%HOMEDRIVE%%HOMEPATH%\\\\Downloads\", \"size:2000\", \"deletionApproach:oldest\" ],\n          \"DelayAfter\": 0,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n]\n</code></pre> <p>Some of the key-value pairs are self-explanatory, but let's review a few important ones:</p> Key Value <code>HandlerType</code> The application or major function we want to control. This could be FireFox, the Cmd terminal, or Word. <code>UtcTimeOn</code> The time the handler will begin to run. To simulate an agent coming into the office at 0900, we set this to your time zone's UTC value. <code>UtcTimeOff</code> The time the handler will stop. To simulate an agent leaving the office at 1700, we set this to your time zone's UTC value. <code>Loop</code> true or false - a handler could be repeated or just run one-time."},{"location":"core/lite/","title":"GHOSTS LITE","text":"<p>Generate web requests and file creation activity with minimal resources (good for when participants lack host access).</p>"},{"location":"core/lite/#overview","title":"Overview","text":""},{"location":"core/lite/#what-is-ghosts-lite","title":"What is GHOSTS LITE?","text":"<p>GHOSTS LITE is a streamlined version of the GHOSTS framework, designed to simulate realistic network activity without the overhead of running actual applications. It programmatically generates web browsing traffic and file creation, emulating real-user actions without launching resource-intensive applications.</p>"},{"location":"core/lite/#purpose","title":"Purpose","text":"<p>GHOSTS LITE was created to provide an efficient tool for simulating network activity. If you don't give participants access to the host, there is perhaps no need to launch applications like web browsers or office suites \u2014 so, GHOSTS LITE reduces resource consumption, including CPU, storage, and memory, simplifying the simulation process and requiring less resources to run.</p>"},{"location":"core/lite/#objectives","title":"Objectives","text":"<ul> <li>Efficiency: Minimize the resources required to simulate user activity on a network.</li> <li>Simplicity: Simplify installation and configuration compared to the full GHOSTS framework.</li> <li>Realism: Preserve the ability to generate realistic network activity.</li> </ul>"},{"location":"core/lite/#installation","title":"Installation","text":""},{"location":"core/lite/#prerequisites","title":"Prerequisites","text":"<ul> <li>Ensure you have the .NET framework installed on your system.</li> </ul>"},{"location":"core/lite/#download-and-install-ghosts-lite","title":"Download and install ghosts-lite","text":"<ol> <li>Download the latest release</li> <li>Extract the downloaded archive to a directory of your choice.</li> <li>Open terminal and navigate to the directory where you extracted ghosts-lite</li> <li>Run the following command to start the program: <pre><code>dotnet Ghosts.Client.Lite.dll\n</code></pre></li> </ol>"},{"location":"core/lite/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure the .NET framework is installed with version 8.0 or later.</li> <li>If you're experiencing any problems please submit an issue or start a discussion.</li> </ul>"},{"location":"core/ui/","title":"GHOSTS UI","text":"<p>A UI for the GHOSTS API, providing interfaces for:</p> <ul> <li>Viewing and managing machines and machine groups controlled by the GHOSTS API</li> <li>Creating and managing timeLines that we can then send to machines or machine groups</li> <li>Viewer for Npcs</li> </ul> <p>For any machine or machine group, we can use the UI to deploy new timelines, or view activities. For machine groups, we can create or manage the machines in the group. For timelines, we can view the activities in the timeline, or deploy new activities. It also provides a management interface for timelines as well.</p>"},{"location":"core/ui/#install","title":"Install","text":"<p>The easiest way to run the GHOSTS UI is to use Docker. The following is an example we would add to the ghosts <code>docker-compose.yml</code> file that will run the GHOSTS UI and the GHOSTS API together:</p> <pre><code>ghostsui:\n    image: dustinupdyke/ghosts-ui\n    container_name: ghosts-ui\n    ports:\n      - '8080:8080'\n    networks:\n      - ghosts-network\n    environment:\n      GHOSTS_API_URL: http://ghosts-api:5000\n</code></pre>"},{"location":"core/ui/#functions","title":"Functions","text":"<p>This first screen is part of the user interface for managing machines within a network simulation or exercise environment, likely related to the GHOSTS framework or a similar system. </p>"},{"location":"core/ui/#machines","title":"Machines","text":"<p>Here's an explanation of the various elements seen here:</p> <p>New Machine Button: This button allows you to create or add a new machine to the simulation environment.</p> <p>Search raw JSON: This input field allows you to perform a search within the machine data using raw JSON queries. It provides a more advanced way to filter or find specific data points.</p> <p>Machine List:</p> <ul> <li>Id: This column displays the unique identifier for each machine.</li> <li>Name: This column displays the name of the machine. In this case, it is labeled as string, which might be a placeholder or default value.</li> <li>Status: This column shows the current status of the machine. The status Down indicates that the machine is not currently active or reachable.</li> </ul> <p>There are also functions to delete the machine, run a particular timeline on that machine, view its activity, or view its JSON representation.</p>"},{"location":"core/ui/#machine-groups","title":"Machine Groups","text":"<p>New Machine Group Button: This button allows you to create or add a new machine group to the simulation environment. Machine groups can be used to collectively manage multiple machines with similar roles or functions.</p> <p>Machine Group List:</p> <ul> <li> <p>Id: This column displays the unique identifier for each machine group.</p> </li> <li> <p>Name: This column displays the name of the machine group. In this case, it is labeled as string-*, which might be a placeholder or default value, suggesting it is a pattern-based naming convention.</p> </li> <li> <p>View Machines (0): This button opens a view to see all the machines currently in this group. The number in parentheses indicates that there are currently no machines in this group.</p> </li> <li> <p>Add Machines (1): This button allows you to add machines to the group. The number in parentheses suggests that there is one machine that could be added or is pending addition to this group.</p> </li> </ul> <p>More (Three-dot Menu): This button likely provides additional options such as deleting a grouping, running a timeline on a group of machines, viewing their activity or JSON representation.</p>"},{"location":"core/ui/#timelines","title":"Timelines","text":"<p>This screen is part of the user interface for managing timelines within a network simulation or exercise environment.</p> <ul> <li> <p>Name: This column displays the name of each timeline. In the example shown, the timeline is named baseline win workstation timeline, which suggests it is a baseline or standard sequence of events for a Windows workstation.</p> </li> <li> <p>Timeline Handlers: This column shows the handler or the specific application/component associated with executing the timeline. In this case, the handler is BrowserFirefox, indicating that this timeline is likely related to actions performed in the Firefox browser.</p> </li> </ul> <p>Actions (Three-dot Menu): This button provides access to deleting or editing a timeline, or viewing its JSON representation.</p>"},{"location":"core/ui/#npcs","title":"NPCs","text":"<p>This screen is part of the user interface for managing NPCs (Non-Player Characters) within a network simulation or exercise environment. </p> <p>Generate Random NPCs Button: This button allows you to generate NPCs automatically with random attributes. This can be useful for populating the environment quickly with varied NPCs.</p> <p>NPC List:</p> <ul> <li> <p>Id: This column displays the unique identifier for each NPC. The IDs are represented as UUIDs, which ensure that each NPC has a distinct identifier within the system.</p> </li> <li> <p>First Name: This column shows the first name of the NPC. In this case, the NPCs listed have names like Richard, Collie, Ferdinande, Moyra, and Emylee.</p> </li> <li> <p>Machine: This column likely shows the machine or environment to which the NPC is assigned. This association would define where or how the NPC interacts within the simulation.</p> </li> <li> <p>Campaign: This column indicates the campaign or scenario in which the NPC is participating. All NPCs listed are part of Exercise Season 2024, suggesting they are involved in the same simulation or training exercise.</p> </li> <li> <p>Enclave: This column shows the organization or unit to which the NPC belongs. In this case, all NPCs are part of Brigade Abbott Inc and Sons.</p> </li> <li> <p>Team: This column indicates the specific team within the enclave to which the NPC belongs. All NPCs listed are part of the Engineering team, which might define their role or tasks within the simulation.</p> </li> </ul>"},{"location":"core/api/timelines/","title":"Managing Timelines","text":"<p>One of the primary capabilities of the API is to manage multiple client timelines. Timelines are the mechanism for clients to perform actions on behalf of a user. For example, a client might execute a timeline to browse a website, create a document, or other Handler activities.</p> <p>Clients are configured to check in periodically with the API to report their current state and to check if any updates are available. We can have the API hold an update for the next time a client, group of clients, or all clients check in. That update will then be processed by the client and the client will report back to the API that the update has been processed. This allows the API to manage the state of the client and to ensure that the client is always up to date. So the process is:</p> <ol> <li>We configure an update for a client or group of clients in the API.</li> <li>Clients check in and are told that an update is available.</li> <li>The client processes the update and reports back to the API that the update has been processed.</li> </ol>"},{"location":"core/api/timelines/#configuring-a-timeline-for-a-client","title":"Configuring a Timeline for a Client","text":"<p>Client timelines are updated via POST to /api/timelines in the following format:</p> <pre><code>{\n  \"machineId\": \"3fa85f64-5717-4562-b3fc-2c963f66afaf\",\n  \"type\": 0,\n  \"activeUtc\": \"2023-03-08T16:38:04.002Z\",\n  \"status\": 0,\n  \"update\": {\n    \"status\": 0,\n    \"timeLineHandlers\": [\n      {\n        \"handlerType\": 0,\n        \"initial\": \"string\",\n        \"utcTimeOn\": {\n          \"ticks\": 0\n        },\n        \"utcTimeOff\": {\n          \"ticks\": 0\n        },\n        \"handlerArgs\": {\n          \"additionalProp1\": \"string\",\n          \"additionalProp2\": \"string\",\n          \"additionalProp3\": \"string\"\n        },\n        \"loop\": true,\n        \"timeLineEvents\": [\n          {\n            \"trackableId\": \"string\",\n            \"command\": \"string\",\n            \"commandArgs\": [\n              \"string\"\n            ],\n            \"delayAfter\": 0,\n            \"delayBefore\": 0\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> <p>The key values to consider here are: The machine ID that you want to update, the other key value is the <code>type</code> of timeline. The type is an integer value that represents the type of update. The following are the types of updates that are currently supported:</p> <ul> <li>Timeline = 0            // this </li> <li>Health = 1</li> <li>TimelinePartial = 10    // this the agent is currently doing off its default timeline</li> <li>RequestForTimeline = 20</li> </ul> ID Type Description 0 Timeline Replaces the client's default timeline stored within ./config/timeline.json 1 Health This updates a client's health instructions 10 TimelinePartial Does not replace the default timeline, rather this timeline is executed immediately on separate threads from whatever 20 RequestForTimeline Use this to instruct the client to send its current default timeline up to the API <p>The remainder of the settings are for the timeline - basically what we are doing here is sending a client a new timeline, with the above values to indicate, which machine and what to change in the <code>update</code> node.</p>"},{"location":"core/handlers/blog_helper/","title":"Blog Helper Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>The 'blog' command for a browser handler allows browse/deletion/upload/reply from a blog site.</p> <p>The handlerArgs for the blog command are:</p> <ul> <li>\"blog-credentials-file\": <code>json credentials file path</code>,  required, credentials file, see SSh.json sample handler for format</li> <li>\"blog-deletion-probability\": &lt;0-100 integer&gt;, default  0, probability to delete a blog post</li> <li>\"blog-upload-probability\": &lt;0-100 integer&gt;, default 0 , probability to upload a blog post</li> <li>\"blog-reply-probability\": &lt;0-100 integer&gt;, default 0 , probability to reply to a random blog post</li> <li>\"blog-browse-probability\": &lt;0-100 integer&gt;, default 0, probability to browse to a random blog post</li> <li>\"blog-version\": \"drupal\",  -- version, required, only drupal is currrently supported, tested with version 7</li> </ul> <p>Sum of browse+deletion+upload+reply &lt;= 100</p> <p>The CommandArgs are strings of the form \"key:value\", supported args are:</p> <ul> <li>site:<code>blog site</code>   -- required</li> <li>credentialKey:<code>credential key contained in the credential file</code></li> </ul> <p>A handler can only browse a single blog site. The username, password specified by the credentialKey are used to login into the site.</p> <p>Under drupal, it assumed that all users have the capabilty to delete all blogs, even other user's blogs.</p> <p>Default content in config directory is blog-content.csv, default reply content is blog-reply.csv</p> <p>This content can be overridden in application.json by the 'BlogContent', 'BlogReply' fields.</p> <pre><code>  \"Content\": {\n      \"EmailContent\": \"\",\n      \"EmailReply\": \"\",\n      \"EmailDomain\": \"\",\n      \"EmailOutside\": \"\",\n      \"BlogContent\": \"\",\n      \"BlogReply\": \"\",\n      \"FileNames\": \"\",\n      \"Dictionary\": \"\"\n    },\n</code></pre> <p>The timeline configuration looks like this:</p> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"BrowserChrome\",\n      \"HandlerArgs\": {\n        \"isheadless\": \"false\",\n        \"blockimages\": \"true\",\n        \"blockstyles\": \"true\",\n        \"blockflash\": \"true\",\n        \"blockscripts\": \"true\",\n        \"stickiness\": 75,\n        \"stickiness-depth-min\": 5,\n        \"stickiness-depth-max\": 10000,\n        \"incognito\": \"true\",\n        \"blog-credentials-file\": \"c:\\\\ghosts_data\\\\blog_creds.json\",\n        \"blog-deletion-probability\": 0,\n        \"blog-upload-probability\": 0,\n        \"blog-browse-probability\": 0,\n        \"blog-reply-probability\": 100,\n        \"blog-version\": \"drupal\"\n\n      },\n      \"Initial\": \"about:blank\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"blog\",\n          \"CommandArgs\": [\n            \"site:http://www.netexhsv.com:8080\",\n            \"credentialKey:credkey1\"\n          ],\n          \"DelayAfter\": 10000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/handlers/browser/","title":"Web Browser (Firefox|Chrome) Configuration","text":"<p>A sample timeline for each browser is available in the repository directory of the same name.</p>"},{"location":"core/handlers/browser/#timeline-settings","title":"Timeline Settings","text":"<p>For any single handler, there are multiple events possible. For a timeline, HandlerArgs settings might look like:</p> <pre><code> \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"BrowserFirefox\",\n            \"HandlerArgs\": {\n                \"isheadless\": \"false\",         // running in headless mode requires less resources\n                \"blockimages\": \"true\",         // block images from loading\n                \"blockstyles\": \"true\",         // block stylesheets from loading\n                \"blockflash\": \"true\",          // block flash (RIP) from loading\n                \"blockscripts\": \"true\",        // block scripts from loading\n                \"stickiness\": 75,              // 75% chance of staying on the same website\n                \"stickiness-depth-min\": 5,     // minimum number of links to click on a website\n                \"stickiness-depth-max\": 10000, // maximum number of links to click on a website\n                \"incognito\": \"true\"            // run in incognito mode\n            },\n</code></pre>"},{"location":"core/handlers/browser/#timelineevent-basics","title":"TimelineEvent Basics","text":"<p>For a given web browser timeline (such as the sample for FireFox), there are several TimelineEvent commands possible:</p> <ul> <li>random</li> </ul> <p>This event combined with loop being set to true will cause the timeline to randomly select a website from the list provided in CommandArgs and make a corresponding GET request to that site. The timeline will then wait for the number of seconds specified in the Delay property before selecting another random website from the list. Note that if stickiness is set, the next link may be selected from the same website as the previous link.</p> <p>An example of this setting is:</p> <pre><code>\"TimeLineEvents\": [\n                {\n                    \"Command\": \"random\",\n                    \"CommandArgs\": [\n                        \"http://www.cmu.edu\",\n                        \"http://sei.cmu.edu\"\n                        ...\n</code></pre> <ul> <li>randomalt</li> </ul> <p>Similar to random but includes POST commands as well.</p> <ul> <li>browse</li> </ul> <p>Perform a GET request to the website provided in CommandArgs. This is typically used to perform a just in time JIT browser activity.</p> <ul> <li>crawl</li> </ul> <p>Used internally in conjunction with a proxy to scrape content for our hosted greyspace.</p> <ul> <li>outlook</li> </ul> <p>For use with the Outlook web client. This command will perform a GET request to the Outlook web client and then perform a series of actions such as opening an email, replying to an email, and sending an email. The number of emails to open, reply to, and send are specified in the CommandArgs property.</p> <ul> <li>sharepoint</li> </ul> <p>For use in browsing SharePoint sites and their related content.</p> <ul> <li>blog</li> </ul> <p>For use in browsing Drupal sites and their related content.</p> <ul> <li>download</li> </ul> <p>Perform a GET request to the website provided in CommandArgs and save the response to a file. This is typically used to perform a just in time JIT browser activity.</p> <ul> <li>upload</li> </ul> <p>Perform a POST request to the website provided in CommandArgs and save the response to a file. This is typically used to perform a just in time JIT browser activity.</p> <p>There are other less often used commands such as:</p> <ul> <li>type</li> <li>typebyid</li> <li>click</li> <li>click.by.name</li> <li>clickbyid</li> <li>click.by.id</li> <li>click.by.linktext</li> <li>click.by.cssselector</li> <li>js.executescript</li> <li>manage.window.size</li> </ul>"},{"location":"core/handlers/browser/#timeline-url-variables","title":"Timeline URL Variables","text":"<p>An example of a URL using variables is: </p> <pre><code>http://craigslist.org/{org}/{group}/{uuid}/{verb}/{type}/{n}?{c}={now}\n</code></pre> <p>All variables are in the format <code>{variable}</code>. There are several standard variables:</p> <ul> <li><code>{now}</code> = short datetime (mm/dd/yyyy format)</li> <li><code>{uuid}</code> = uuid</li> <li><code>{c}</code> = a single character from a-z and A-Z</li> <li><code>{n}</code> = number between 1 and 1000</li> </ul> <p>We can also configure additional variables by adding the following to a browser handler in a timeline:</p> <pre><code>\"url-replace\": [\n          {\"verb\": [\"order\", \"enable\", \"engage\"]},\n          {\"group\": [\"operations\", \"logistics\", \"medical\"]},\n          {\"org\": [\"army\", \"command\", \"brigade\", \"battalion\"]},\n          {\"type\": [\"document\", \"doc\", \"files\", \"vault\", \"filevault\"]}\n        ]\n</code></pre> <p>Therefore:</p> <pre><code>https://www.cmu.edu/{org}/{group}/{verb}/{type}/{uuid}/version_{n}?{c}={now}\n</code></pre> <p>might be rendered as:</p> <pre><code>https://www.cmu.edu/command/operations/order/doc/bcc396b5-47d0-4665-93c8-0a314cec13e1/version_55?d=6/21/2022\n</code></pre>"},{"location":"core/handlers/clicks/","title":"Clicks Handler Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the GHOSTS GitHub repository</p> <p>The following is the format for a basic timeline handler:</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"Clicks\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": true,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"Clicks\",\n                    \"CommandArgs\": [],\n                    \"TrackableId\": \"\",\n                    \"DelayAfter\": 10000,\n                    \"DelayBefore\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>In this example, \"clicks\" simply executes a mouse left-click every 10000 milliseconds. This is useful for keeping a computer awake, or because some security products monitor for this as an indication of computer activity, or for testing purposes.</p> <p>GHOSTS does not currently have a method for clicking on a specific location on the screen or clicking specific buttons/alerts.</p>"},{"location":"core/handlers/cmd/","title":"CMD Handler Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>The following is the format for a basic timeline handler:</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"Command\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"cd %homedrive%%homepath%\\\\Downloads\",\n                    \"CommandArgs\": [\n                        \"powershell expand-archive -Path italian_breakfast.zip -destinationpath x\",\n                        \"cd x\",\n                        \"dir\"\n                    ],\n                    \"TrackableId\": \"&lt;guid id from trackables table/&gt;\",\n                    \"DelayAfter\": 10,\n                    \"DelayBefore\": 10000\n                }\n            ]\n        }\n    ]\n}\n</code></pre> <p>In this example, the command window is launched, and the initial command of moving into the current user's Downloads folder is executed. Then, the command window is used to extract the contents of a zip file, move into the extracted folder, and list the contents of the folder. Thus, CommandArgs can be used to execute any number of commands in sequence.</p> <p>Note that the command window is not closed after the commands are executed. This is because the command window is launched in a separate process, and the process is terminated after the commands are executed. If you want to keep the command window open, you can use the following configuration:</p> <pre><code>{\n    \"Command\": \"cmd /k cd %homedrive%%homepath%\\\\Downloads\",\n    \"CommandArgs\": [\n        \"powershell expand-archive -Path italian_breakfast.zip -destinationpath x\",\n        \"cd x\",\n        \"dir\"\n    ],\n    \"TrackableId\": \"&lt;guid id from trackables table/&gt;\",\n    \"DelayAfter\": 10,\n    \"DelayBefore\": 10000\n}\n</code></pre>"},{"location":"core/handlers/excel/","title":"Excel Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <pre><code>{\n    \"TimeLineHandlers\": [\n      {\n        \"HandlerType\": \"Excel\",\n        \"Initial\": \"\",\n        \"UtcTimeOn\": \"00:00:00\",\n        \"UtcTimeOff\": \"24:00:00\",\n        \"HandlerArgs\": {\n          \"workingset\": {\n            \"max\": 20,\n            \"max-age-in-hours\": 72\n          }\n        },\n        \"Loop\": true,\n        \"TimeLineEvents\": [\n          {\n            \"Command\": \"create\",\n            \"CommandArgs\": [ \"%homedrive%%homepath%\\\\Documents\", \"pdf\", \"pdf-vary-filenames\", \"save-array:['c:\\\\tmp','c:\\\\tmp\\\\path2','c:\\\\tmp\\\\path3']\" ],\n            \"DelayAfter\": 900000,\n            \"DelayBefore\": 0\n          }\n        ]\n      }\n    ]\n}\n</code></pre> <p>Some of the key-value pairs are self-explanatory, but let's review a few important ones:</p> Key Value <code>workingset</code> For the documents Excel creates, how many should we create (max) and how old can they be before we start creating new ones (max-age-in-hours). <code>Command</code> (create) Create new documents. This is currently the only setting, but there is space for new commands to be built in the future <code>CommandArgs</code> See below <p>For CommandArgs, we began with positional arguments, but this quickly became unwieldy. We are now using named arguments, which are easier to read and maintain, but the mix remains for now. The following arguments are available:</p> <ul> <li>[0] The path to the folder where the documents should be created. (old style)</li> <li>[1] Also periodically export documents as PDFs as well as saving them natively. (middle style)</li> <li>[2] if creating PDFs, vary their name from the original document. (new style)</li> <li>[3] Randomly save documents in an array of locations. (new style)</li> </ul>"},{"location":"core/handlers/notepad/","title":"Notepad Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>There is currently only one supported command (random) which uses probabilities to write text.</p> <p>During each activity cycle the handler will:</p> <ul> <li>Choose action as either delete, create, modify, or view</li> <li>if delete, then delete random file from output-directory</li> <li>if create, open notepad, add random text, save as random new file to output-directory</li> <li>if view, open notepad with existing file from input-directory</li> <li>if modify, open notepad with existing file from output-directory, add random text, save</li> <li>if create or modify, roll against pdf-probability and do a print to pdf if roll succeeds</li> </ul> <p>For this to work, the default printer must be print to pdf - there is curently no checking is done if the correct printer is not selected.</p> <p>At end of activity cycle, Notepad is closed.</p> <p>CommandArgs from Timeline events is not used.</p> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Notepad\",\n      \"HandlerArgs\": {\n        \"execution-probability\": 100,\n        \"deletion-probability\": 0,\n        \"view-probability\": 0,\n        \"creation-probability\": 0,\n        \"modification-probability\": 100,\n        \"pdf-probability\": 100,\n        \"input-directory\": \"C:\\\\ghosts_data\\\\uploads\",\n        \"output-directory\": \"C:\\\\ghosts_data\\\\uploads\",\n        \"text-generation\": \"random\",\n        \"min-paragraphs\": 4,\n        \"max-paragraphs\": 15,\n        \"delay-jitter\": 50\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n\n  ]\n}\n</code></pre>"},{"location":"core/handlers/npc_system/","title":"NPC System Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>This is currently only used to turn the client on and off (where the client binary still runs, but does nothing).  It is not used to control the client's behavior as other handlers might do.</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"NpcSystem\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"Stop\",\n                    \"CommandArgs\": [],\n                    \"DelayAfter\": 0,\n                    \"DelayBefore\": 0\n                }\n            ]\n        },\n       {\n            \"HandlerType\": \"NpcSystem\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"Start\",\n                    \"CommandArgs\": [],\n                    \"DelayAfter\": 0,\n                    \"DelayBefore\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"core/handlers/outlook/","title":"Outlook Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"Outlook\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": \"True\",\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"create\",\n                    \"CommandArgs\": [\n                        \"CurrentUser\",\n                        \"Random|Other:string ToEmailAddress - comma separate multiples\",\n                        \"Random|Other:string CcEmailAddress - comma separate multiples\",\n                        \"Random|Other:string BccEmailAddress - comma separate multiples\",\n                        \"Random|Other:string Subject\",\n                        \"Random|Other:string Body\",\n                        \"PlainText|RTF|HTML enum BodyType\",\n                        \"string Attachments - comma separate multiples\"\n                    ],\n                    \"DelayAfter\": 900000,\n                    \"DelayBefore\": 0\n                },\n              {\n                \"Command\": \"reply\",\n                \"CommandArgs\": [\n                  \"CurrentUser\",\n                  \"All - reply to all\",\n                  \"All\",\n                  \"All\",\n                  \"Parent - format is 'RE: &lt;original message/&gt;'\",\n                  \"Random+Parent - format is reply then original message\",\n                  \"Parent - format of original message\",\n                  \"\"\n                ],\n                \"DelayAfter\": 900000,\n                \"DelayBefore\": 0\n              },\n              {\n                \"Command\": \"clickrandomlink\",\n                \"CommandArgs\": [],\n                \"DelayAfter\": 900000,\n                \"DelayBefore\": 0\n              }\n            ]\n        },\n        {\n            \"HandlerType\": \"Outlook\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": \"True\",\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"create\",\n                    \"CommandArgs\": [\n                        \"CurrentUser\",\n                        \"random\",\n                        \"random\",\n                        \"random\",\n                        \"Random\",\n                        \"Random\",\n                        \"PlainText\",\n                        \"\"\n                    ],\n                    \"DelayAfter\": 900000,\n                    \"DelayBefore\": 0\n                },\n              {\n                \"Command\": \"reply\",\n                \"CommandArgs\": [\n                  \"CurrentUser\",\n                  \"All\",\n                  \"All\",\n                  \"All\",\n                  \"Parent\",\n                  \"Parent+Random\",\n                  \"Parent\",\n                  \"\"\n                ],\n                \"DelayAfter\": 900000,\n                \"DelayBefore\": 0\n              },\n              {\n                \"Command\": \"clickrandomlink\",\n                \"CommandArgs\": [],\n                \"DelayAfter\": 900000,\n                \"DelayBefore\": 0\n              }\n            ]\n        }\n    ]\n}\n</code></pre> <p>Some of the key-value pairs are self-explanatory, but let's review a few important ones:</p> Key Value <code>Command</code> (create) Create new emails. (reply) Reply to emails in the current inbox at random (clickrandomlink) Click a link at random in the current inbox <code>CommandArgs</code> See below <p>For CommandArgs, we began with positional arguments, but this quickly became unwieldy. We are now using named arguments, which are easier to read and maintain, but the mix remains for now. The following arguments are available for creating new emails (create):</p> <ul> <li>[0] \"CurrentUser\": The current user's email address, or indicate the email address you want to use here. Note that if Outlook is not configured to use this email address, email may not be sent.</li> <li>[1] \"Random|Other\": This configures the TO address in an email where \"Random\" picks email addresses from the configuration directory. If you want to specify particular addresses, this field can also be comma-separated email addresses.</li> <li>[2] \"Random|Other\": This configures the CC address in an email where \"Random\" picks email addresses from the configuration directory. If you want to specify particular addresses, this field can also be comma-separated email addresses.</li> <li>[3] \"Random|Other\": This configures the BCC address in an email where \"Random\" picks email addresses from the configuration directory. If you want to specify particular addresses, this field can also be comma-separated email addresses.</li> <li>[4] \"Random|Other:string Subject\",</li> <li>[5] \"Random|Other:string Body\",</li> <li>[6] \"PlainText|RTF|HTML enum BodyType\",</li> <li>[7] \"string Attachments - comma separate multiples\"</li> </ul> <p>For replying to emails (reply):</p> <ul> <li>[0] \"CurrentUser\": The current user's email address, or indicate the email address you want to use here. Note that if Outlook is not configured to use this email address, email may not be sent.</li> <li>[1] \"All\": Reply to all on the original thread, or reply to a specific user on the original email thread. If you want to reply to a specific user, indicate the email address here.</li> <li>[2] \"All\": Reply to all the addresses in the original email thread CC field. If you want to reply to a specific user, indicate the email address here.</li> <li>[3] \"All\": Reply to all the addresses in the original email thread BCC field. If you want to reply to a specific user, indicate the email address here.</li> <li>[4] \"Parent\": Subject line of the reply. \"Parent\" format is 'RE: \\(original_message\\)'</li> <li>[5] \"Random+Parent\": Body of the reply. \"Random+Parent\" format is the reply then the original message below - as is typically seen in email threads.</li> <li>[6] \"Parent\": HTML or plain text. \"Parent\" uses the format of the original message.</li> <li>[7] \"\": Not used in replies.</li> </ul>"},{"location":"core/handlers/pidgin/","title":"Pidgin Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>Exercises a Pidgin client - tested with Pidgin 2.14.1 (libpurple 2.14.1) ane Centos 7.3 ejabberd server</p>"},{"location":"core/handlers/pidgin/#prequisites","title":"Prequisites","text":"<ul> <li>Pidgin must be installed and already configured with an enabled account in %APPDATA%.purple\\accounts.xml and pointing to the target server. </li> <li>The logged in user must have an enabled Pidgin account in accounts.xml</li> <li>Pidgin preferences must have already been set in  %APPDATA%.purple\\prefs.xml</li> <li>Conversations must be TABBED (in prefs.xml/conversations section, name='tabs' type='bool' value='1')</li> </ul>"},{"location":"core/handlers/pidgin/#implementation","title":"Implementation","text":"<ul> <li>This implementation is about 95% open loop as there are no C# bindings for the Pidgin libpurple.dll</li> <li>The only feedback to GHOSTS is via window titles, it cannot determine when messages arrive or message content.</li> <li>GHOSTS cannot parse the chat logs to synch converstations as the Pidgin process has these log files locked.</li> <li>So messages are sent open loop with simple delays between messages.</li> <li>The GHOSTS time line CommandArgs lists chat targets (username@domain)</li> </ul> <p>Activity Cycle - each activity cycle is seperated by DelayAfter. An activity cycle does:</p> <ul> <li>Pick a random target from the timeline -  this is only used to initiate the first chat</li> <li>If Pidgin is not started then Pidgin is started.</li> <li>If an IM window is not open, the roll against NewChatProbability and open an IM window to the random target chosen from the timeline</li> <li>If roll against  NewChatProbability was not successful, end activity cycle.</li> <li>If an IM window is open and a new chat was not initiated, the roll against CloseChatProbability, if successful, close current chat and end activity cycle.</li> <li>If get to this point, then IM window is open with one or more targets and message loop is entered.</li> <li>Enter a loop in which between RepliesMin and RepliesMax messages are sent.</li> <li>The first message is sent to current selected target in the Chat window, then the next chat target in the Chat window is selected. If the max replies is reached, then the loop exits and the activity cycle is ended. The next activity cycle picks up where the last activity cycle ended as per the first chat target.</li> </ul> <p>A chat target can be the current logged in user, which means messages are simply echoed back from the server.</p> <ul> <li>As chats arrive from other different users, the number of open tabs in the grows, but chats can be closed by CloseChatProbability</li> <li>Between 1-4 random emojis are added to a message based on EmojiProbability</li> <li>During an activity cycle, any popup windows that match a title in ErrorWindowTitles are closed</li> </ul> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Pidgin\",\n      \"HandlerArgs\": {\n        \"RepliesMin\": 2,\n        \"RepliesMax\": 5,\n        \"ErrorWindowTitles\": [ \"XMPP Message Error\" ],\n        \"EmoticonProbability\": 50,\n        \"NewChatProbability\": 100,\n        \"CloseChatProbability\": 100,\n        \"TimeBetweenMessagesMax\": 10000,\n        \"TimeBetweenMessagesMin\": 5000\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n            \"bjones@sitea.com\",\n            \"pharvey@sitea.com\",\n\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/handlers/powerpoint/","title":"PowerPoint Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <pre><code>{\n    \"TimeLineHandlers\": [\n      {\n        \"HandlerType\": \"PowerPoint\",\n        \"Initial\": \"\",\n        \"UtcTimeOn\": \"00:00:00\",\n        \"UtcTimeOff\": \"24:00:00\",\n        \"HandlerArgs\": {\n          \"workingset\": {\n            \"max\": 20,\n            \"max-age-in-hours\": 72\n          }\n        },\n        \"Loop\": true,\n        \"TimeLineEvents\": [\n          {\n            \"Command\": \"create\",\n            \"CommandArgs\": [ \"%homedrive%%homepath%\\\\Documents\", \"pdf\", \"pdf-vary-filenames\", \"save-array:['c:\\\\tmp','c:\\\\tmp\\\\path2','c:\\\\tmp\\\\path3']\" ],\n            \"DelayAfter\": 900000,\n            \"DelayBefore\": 0\n          }\n        ]\n      }\n    ]\n}\n</code></pre> <p>Some of the key-value pairs are self-explanatory, but let's review a few important ones:</p> Key Value <code>workingset</code> For the documents Excel creates, how many should we create (max) and how old can they be before we start creating new ones (max-age-in-hours). <code>Command</code> (create) Create new documents. This is currently the only setting, but there is space for new commands to be built in the future <code>CommandArgs</code> See below <p>For CommandArgs, we began with positional arguments, but this quickly became unwieldy. We are now using named arguments, which are easier to read and maintain, but the mix remains for now. The following arguments are available:</p> <ul> <li>[0] The path to the folder where the documents should be created. (old style)</li> <li>[1] Also periodically export documents as PDFs as well as saving them natively. (middle style)</li> <li>[2] if creating PDFs, vary their name from the original document. (new style)</li> <li>[3] Randomly save documents in an array of locations. (new style)</li> </ul>"},{"location":"core/handlers/print/","title":"Printing Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <ul> <li>Command is the printer to be used for printing (this must already be setup on the system).</li> <li>CommandArgs is the path to the file to be printed.</li> </ul> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"Print\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": \"False\",\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"MyPrinter\",\n                    \"CommandArgs\": [\n                        \"C:\\\\Temp\\\\print_test.txt\"\n                    ],\n                    \"DelayAfter\": 900000,\n                    \"DelayBefore\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"core/handlers/rdp/","title":"Remote Desktop Protocol (RDP) Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>Each CommandArg is of the form shown below, if multiple CommandArgs are present a random one is chosen for execution on each cycle.</p> <ul> <li><code>targetIp</code>|<code>credkey</code>  The targetIP is the IP to use for the RDP connection</li> <li>The <code>credKey</code> is only used to retrieve the password of the matching record in the credentials file.</li> <li>The username (if supplied) is  used instead of the logged-in user (can also provide 'domain' keyword in credentials)</li> <li>The password is used if a password  prompt appears on RDP open</li> </ul> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Rdp\",\n      \"HandlerArgs\": {\n        \"CredentialsFile\": \"&lt;path to credentials&gt;\", //required, file path to a JSON file containing the RDP credentials\n        \"mouse-sleep-time\": 10000, //time to sleep between random mouse movements\n        \"execution-time\": 60000, //after this total connection time has elapsed, the RDP is closed and a new connection opened\n        \"execution-probability\": 100, //after choosing a random target, the probability that a RDP to the target is opened\n        \"delay-jitter\": 50\n\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n            \"&lt;targetIp&gt;|&lt;credkey&gt;\"\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n\n\n  ]\n}\n</code></pre>"},{"location":"core/handlers/reboot/","title":"Reboot Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>This is the only configuration possible for reboots currently. A fast loop configuration is probably not recommended, but once a day or similar is reasonable.</p> <pre><code>{\n    \"TimeLineHandlers\": [\n        {\n            \"HandlerType\": \"Reboot\",\n            \"Initial\": \"\",\n            \"UtcTimeOn\": \"00:00:00\",\n            \"UtcTimeOff\": \"24:00:00\",\n            \"Loop\": false,\n            \"TimeLineEvents\": [\n                {\n                    \"Command\": \"\",\n                    \"CommandArgs\": [ ],\n                    \"DelayAfter\": 900000,\n                    \"DelayBefore\": 0\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"core/handlers/sftp/","title":"Secure File Transfer Protocol (sFTP) Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>Each CommandArg is of the formation shown below, if multiple CommandArgs are present a random one is chosen for execution on each cycle.</p> <ul> <li>Credential handling is done in the same manner as the SSH handler, see that sample timeline for documentation</li> <li>After the <code>cred_key</code> is a ';' delimited list of SFTP commands that are executed in sequence during a cycle.</li> <li>Downloaded files are placed in the user's default downloads directory</li> </ul> <p>Supported commands:</p> <ul> <li>get [remotefile] - downloads random remote file from remote host. Can specify absolute/relative path instead of [remotefile]</li> <li>put [localfile] - uploads random remote file from local upload directory to remote host. Can specify absolute/relative path instead of [localfile]</li> <li>cd [remotedir] - change to random directory in current directory on remote host. Can specify absolute/relative path instead of [remotedir]</li> <li>rm [remotefile] - deletes random remote file from remote host. Can specify absolute/relative path instead of [remotefile]</li> <li>ls [remotedir] - list remote contents of current directory, if no directory specified use current directory. Can specify absolute/relative path instead of [remotedir]</li> <li>mkdir [randomname] - make a random directory in cwd on remote host. Can specify absolute/relative path instead of [randomname]</li> </ul> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Sftp\",\n      \"HandlerArgs\": {\n        \"TimeBetweenCommandsMax\": 5000, //max,min between individual SFTP commands\n        \"TimeBetweenCommandsMin\": 1000,\n        \"CredentialsFile\": \"&lt;path to credentials&gt;\", //required, file path to a JSON file containing the SSH credentials\n        \"UploadDirectory\": \"&lt;path to uploads directory&gt;\", //optional, directory that contains files for upload, it not specified user Downloads directory is used\n        \"delay-jitter\": 0 //optional, default =0, range 0 to 50, if specified, DelayAfter varied by delay-%jitter*delay to delay+%jitter*delay\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n            \"&lt;someIp&gt;|&lt;credKey&gt;|&lt;a_cmd&gt;;&lt;a_cmd&gt;;&lt;a_cmd&gt;....;&lt;a_cmd&gt;\"\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    } \n\n  ]\n}\n</code></pre>"},{"location":"core/handlers/sharepoint_helper/","title":"Sharepoint Helper Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>The 'sharepoint' command for a browser handler allows download/deletion/upload from a sharepoint site.  </p> <p>The handlerArgs for the sharepoint command are:</p> <ul> <li>\"sharepoint-credentials-file\": <code>json credentials file path</code>,  required, credentials file, see SSh.json sample handler for format</li> <li>\"sharepoint-deletion-probability\": &lt;0-100 integer&gt;, default  0</li> <li>\"sharepoint-upload-probability\": &lt;0-100 integer&gt;, default 0</li> <li>\"sharepoint-download-probability\": &lt;0-100 integer&gt;, default 0, sum of download+deletion+upload &lt;= 100, download directory is browser download directory</li> <li>\"sharepoint-version\": \"2013\",  -- version, required, only 2013 is currrently supported</li> <li>\"sharepoint-upload-directory\": <code>upload directory path</code>\" -- files to be uploaded are read from this directory, default is browser download directory</li> </ul> <p>The CommandArgs are strings of the form \"key:value\", supported args are:</p> <ul> <li>site:<code>sharepoint site</code>   -- required</li> <li>credentialKey:<code>credential key contained in the credential file</code></li> </ul> <p>A handler can only browse a single share point site. The username, password specified by the credentialKey are used to login into the site assuming NTLM authentication (i.e,  username:password is passed in the URL header). The Documents site is assumed to be at <code>site</code>/Documents/Forms/Allitems.aspx</p> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"BrowserChrome\",\n      \"HandlerArgs\": {\n        \"isheadless\": \"false\",\n        \"blockimages\": \"true\",\n        \"blockstyles\": \"true\",\n        \"blockflash\": \"true\",\n        \"blockscripts\": \"true\",\n        \"stickiness\": 75,\n        \"stickiness-depth-min\": 5,\n        \"stickiness-depth-max\": 10000,\n        \"incognito\": \"true\",\n        \"sharepoint-credentials-file\": \"c:\\\\ghosts_data\\\\sharepoint_creds.json\",\n        \"sharepoint-deletion-probability\": 15,\n        \"sharepoint-upload-probability\": 35,\n        \"sharepoint-download-probability\": 35,\n        \"sharepoint-version\": \"2013\",\n        \"sharepoint-upload-directory\": \"C:\\\\ghosts_data\\\\uploads\"\n\n      },\n      \"Initial\": \"about:blank\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"sharepoint\",\n          \"CommandArgs\": [\n            \"site:http://portal.sitea.com\",\n            \"credentialKey:credkey1\"\n          ],\n          \"DelayAfter\": 60000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/handlers/ssh/","title":"Secure Shell (SSH) Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>The credentials JSON file expected by this handler has the following format.</p> <pre><code>{\n         \"Version\": \"1.0\",\n         \"Data\": {\n            \"credkey1\": {\"username\":\"user1\",\"password\":\"pw1base64\"},\n            \"credkey2\": {\"username\":\"user2\",\"password\":\"pw2base64\"},\n            ....\n            \"credkeyN\": {\"username\":\"userN\",\"password\":\"pwNbase64\"},\n          }\n}\n</code></pre> <p>The Version slot string is unused at the moment but is there in case this implementation is extended in the future. The credkey is simply some unique string that identifies the credential. The password is assumed to be UTF8 that is base64 encoded. See src\\Ghosts.Client\\Infrastructure\\SshSupport.cs for a list [<code>reservedword</code>] supported in Ssh commands</p> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Ssh\",\n      \"HandlerArgs\": {\n        \"CommandTimeout\": 1000, //max time to wait for new input from an SSH command execution\n        \"TimeBetweenCommandsMax\": 5000, //max,min between individual SSH commands\n        \"TimeBetweenCommandsMin\": 1000,\n        \"ValidExts\": \"txt;doc;png;jpeg\", //used by [randomextension] reserved word, choose random extension from this list\n        \"CredentialsFile\": \"d:\\\\ghosts_data\\\\ssh_creds.json\", //required, file path to a JSON file containing the SSH credentials\n        \"delay-jitter\": 0 //optional, default =0, range 0 to 50, if specified, DelayAfter varied by delay-%jitter*delay to delay+%jitter*delay\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n            \"&lt;an IP&gt;|&lt;unique_key_from_credentials&gt;|ls -lah;ls -ltrh;help;pwd;date;time;uptime;uname -a;df -h;cd ~;cd [remotedirectory];touch [randomname].[randomextension];mkdir [randomname]\"  //&lt;serverIP&gt;|&lt;credKey|&lt;commmandList&gt;\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/handlers/watcher/","title":"File Watcher Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>The 'folder' command for Watcher is intended to monitor diskspace in a target folder. The CommandArgs are in key:value pairs:</p> <ul> <li>path:<code>some folder</code>  - folder to watch</li> <li>size:<code>max size in MB</code> - maximum folder size in MB</li> <li>deletionApproach:oldest|largest|random</li> </ul> <p>If max size is exceeded, then files are deleted from the folder using the deletionApproach until the folder size is under max size.  One obvious use of this is to monitor the browser downloads directory, i.e. path:%HOMEDRIVE%%HOMEPATH%\\Downloads. The deletion action can result in deleting a file that is in the progress of being downloaded which results in a failed download by the browser for this file. But since the goal is traffic generation, this is not a deal breaker.  </p> <pre><code>{\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Watcher\",\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": true,\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"file\",\n          \"CommandArgs\": [ \"C:\\\\Temp\\\\test.txt\", \"300000\" ],\n          \"DelayAfter\": 0,\n          \"DelayBefore\": 0\n        }\n      ]\n    },\n    {\n      \"HandlerType\": \"Watcher\",\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": true,\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"folder\",\n          \"CommandArgs\": [ \"path:%HOMEDRIVE%%HOMEPATH%\\\\Downloads\", \"size:2000\", \"deletionApproach:oldest\" ],\n          \"DelayAfter\": 0,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"core/handlers/wmi/","title":"Windows Management Instrumentation (WMI) Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <p>Each CommandArg is of the formation shown below, if multiple CommandArgs are present a random one is chosen for execution on each cycle. Credential handling is done in the same manner as the SSH handler, see that sample timeline for documentation. After the <code>cred_key</code> is a ';' delimited list of WMI commands that are executed in sequence during a cycle.</p> <p>Supported commands:</p> <ul> <li>GetOperatingSystem</li> <li>GetBios</li> <li>GetProcessor</li> <li>GetUserList</li> <li>GetNetworkInfo</li> <li>GetFilesList</li> <li>GetProcessList</li> </ul> <p>The credentials file uses the same format as SFTP/SSH, but requires a 'domain' keyword in addition to 'username', 'password' For this to work, the target host needs to be configured to allow WMI The domain admin is the best choice for username/password The trusted hosts of the VM running GHOSTS must be set to include the IPs of any of the hosts being interrogated by WMI</p> <p>You can print the Trusted hosts if the current host by executing in Powershell:</p> <ul> <li>winrm g winrm/config/client</li> </ul> <p>You can set Trusted Hosts to a wild card (trust all hosts) by executing in Powershell:</p> <ul> <li>winrm s winrm/config/client '@{TrustedHosts=\"*\"}'</li> </ul> <pre><code>{\n  \"Status\": \"Run\",\n  \"TimeLineHandlers\": [\n    {\n      \"HandlerType\": \"Wmi\",\n      \"HandlerArgs\": {\n        \"TimeBetweenCommandsMax\": 5000, //max,min between individual WMI commands\n        \"TimeBetweenCommandsMin\": 1000,\n        \"CredentialsFile\": \"&lt;path to credentials&gt;\", //required, file path to a JSON file containing the WMI credentials\n        \"delay-jitter\": 0 //optional, default =0, range 0 to 50, if specified, DelayAfter varied by delay-%jitter*delay to delay+%jitter*delay\n      },\n      \"Initial\": \"\",\n      \"UtcTimeOn\": \"00:00:00\",\n      \"UtcTimeOff\": \"24:00:00\",\n      \"Loop\": \"True\",\n      \"TimeLineEvents\": [\n        {\n          \"Command\": \"random\",\n          \"CommandArgs\": [\n            \"&lt;someIp&gt;|&lt;credKey&gt;|&lt;a_cmd&gt;;&lt;a_cmd&gt;;&lt;a_cmd&gt;....;&lt;a_cmd&gt;\"\n          ],\n          \"DelayAfter\": 20000,\n          \"DelayBefore\": 0\n        }\n      ]\n    }\n\n  ]\n}\n</code></pre>"},{"location":"core/handlers/word/","title":"Word Configuration","text":"Sample Configuration <p>The sample configuration below is also available in the [GHOSTS GitHub repository](https://github.com/cmu-sei/GHOSTS/blob/master/src/Ghosts.Client/Sample%20Timelines/clicks</p> <pre><code>{\n    \"TimeLineHandlers\": [\n      {\n        \"HandlerType\": \"Word\",\n        \"Initial\": \"\",\n        \"UtcTimeOn\": \"00:00:00\",\n        \"UtcTimeOff\": \"24:00:00\",\n        \"HandlerArgs\": {\n          \"workingset\": {\n            \"max\": 20,\n            \"max-age-in-hours\": 72\n          }\n        },\n        \"Loop\": true,\n        \"TimeLineEvents\": [\n          {\n            \"Command\": \"create\",\n            \"CommandArgs\": [ \"%homedrive%%homepath%\\\\Documents\", \"pdf\", \"pdf-vary-filenames\", \"save-array:['c:\\\\tmp','c:\\\\tmp\\\\path2','c:\\\\tmp\\\\path3']\" ],\n            \"DelayAfter\": 900000,\n            \"DelayBefore\": 0\n          }\n        ]\n      }\n    ]\n}\n</code></pre> <p>Some of the key-value pairs are self-explanatory, but let's review a few important ones:</p> Key Value <code>workingset</code> For the documents Excel creates, how many should we create (max) and how old can they be before we start creating new ones (max-age-in-hours). <code>Command</code> (create) Create new documents. This is currently the only setting, but there is space for new commands to be built in the future <code>CommandArgs</code> See below <p>For CommandArgs, we began with positional arguments, but this quickly became unwieldy. We are now using named arguments, which are easier to read and maintain, but the mix remains for now. The following arguments are available:</p> <ul> <li>[0] The path to the folder where the documents should be created. (old style)</li> <li>[1] Also periodically export documents as PDFs as well as saving them natively. (middle style)</li> <li>[2] if creating PDFs, vary their name from the original document. (new style)</li> <li>[3] Randomly save documents in an array of locations. (new style)</li> </ul>"},{"location":"shadows/","title":"GHOSTS SHADOWS","text":"<p>Shadows provides access to a locally-hosted LLM for various GHOSTS agent purposes.</p> <p>It provides multiple interfaces:</p> <ul> <li>A REST API for the purposes of ghosts agents</li> <li>A UI web interface for testing and demo purposes</li> </ul> <p>The default API endpoints are:</p> <ul> <li>Activities: Answers the question of \"what should an NPC do next?\"</li> <li>Chat: Provides content for an NPC to chat with a player or other NPC</li> <li>Content: Provides a richer array of content for the docuements created by NPCs in a range</li> <li>Social: Provides content for an NPC to post on a social media system such as GHOSTS Socializer</li> </ul> <p>We suspect there will be many more in the future.</p>"},{"location":"shadows/#running-via-docker","title":"Running via Docker","text":"<p>Typically, the easiest way to manage deployment is to pass the env var \"GHOSTS_OLLAMA_URL\" into the container.</p> <pre><code>EXPORT GHOSTS_OLLAMA_URL=http://localhost:11434\n</code></pre> <p>(where 5900 is the api port and 7860 is the ui port) <code>docker run -d --name shadows -p 5900:5900 -p 7860:7860 dustinupdyke/ghosts-shadows</code></p>"},{"location":"shadows/#running-on-bare-metal","title":"Running on bare metal","text":"<p>Standing up the Shadows stack is currently (you'll need three terminal windows. We'll clean this up eventually):</p> <p>Get Ollama up and running:</p> <p><pre><code>cd content-models/content\nollama create content\nollama run content\n</code></pre> Now run the two servers (in separate terminals):</p> <pre><code>python api.py\npython ui.py\n</code></pre> <p>Eventually ollama will serve multiple models all the time.</p> <p>So, this loop for [\"content\", \"social\", \"chat\", \"activities\"] will be:</p> <pre><code>cd content-models/activities\nollama create activities\n\ncd content-models/chat\nollama create chat\n\ncd content-models/social\nollama create social\n\nollama serve\n</code></pre> <p>If you want this to be available beyond localhost, you'd need to run:</p> <pre><code>OLLAMA_HOST=0.0.0.0:11434 ollama serve\n</code></pre> <p>Now ollama is running all four models concurrently. The API server provides access into each.</p>"},{"location":"spectre/","title":"GHOSTS SPECTRE Overview","text":"GHOSTS SPECTRE Source Code <p>The GHOSTS SPECTRE Source Code Repository is hosted on GitHub, but is now archived.</p> <p>Any development on SPECTRE will be done in the main GHOSTS repository.</p> <p>SPECTRE was our attempt to reduce that agent browsing patterns appear as \"computer random\".<sup>1</sup> This module modifies user web browser timelines so that they more closely match that agent's preferences over time. We expect this simple model of ML to be used for other types of agent activity in the future.</p> <p>Agent browsing patterns are no longer random and match different types of users on a network. These patterns improve over time.</p> <p>Also, this simple model of ML can now be used for other types of agent activity. This makes for an exciting future on the GHOSTS platform.</p> <p>Using Machine Learning to Increase NPC Fidelity with Dynamic Preferences Used in Forward-Looking Decisions</p> <p>As GHOSTS agents make more informed, and hopefully, more complex decisions, there is a need for each agent to have a system of preferences existing at the time the agent is created, and for an ability to update those preferences over time as the agent continues to make decisions and measure the outcome of those decisions afterwards.</p> <p>SPECTRE provides GHOSTS enables agents to make preferenced decisions and to use the outcome of those decisions to learn and evaluate future choices more intelligently.</p>"},{"location":"spectre/#how-it-works","title":"How it works","text":"<p>SPECTRE currently has two components:</p>"},{"location":"spectre/#preference-engine","title":"Preference Engine","text":"<ol> <li>An administrator creates the types of personas they wish to have GHOSTS agents represent</li> <li>GHOSTS agents report in their browser history to the GHOSTS C2 API</li> <li>If the agent has no persona, SPECTRE assigns one at random</li> <li>The persona assignment randomly creates different preferences for the agent based on persona settings (not unlike character creation in D&amp;D)</li> <li>Preferences are a preference and its numeric value (-100 to 100) which roughly represents how much an agent likes or dislikes something</li> <li>Preferences can be any <code>key:value</code> pair, such as:          \"sports\":50          \"kali\":35          \"127.0.0.1\":77</li> <li>Preferences of 0 mean that the agent is indifferent (or has no preference)</li> <li>All preference history is stored so that in the (near) future we can track an agent's preferences over time</li> <li>It is assumed that high negative preferences would have agents avoiding those values (e.g. for \"onions\":-100 one would assume an agent is avoiding eating onions at all costs.)</li> </ol>"},{"location":"spectre/#machine-learning","title":"Machine Learning","text":"<p>The incoming GHOSTS agent browsing activity can be attenuated to individual agent preferences after they are assigned some number of preferences based on default persona profiles. SPECTRE will aggregate this information periodically and perform model training and testing against that browsing activity, and recommend new browsing patterns for that agent to execute. This creates a new activity timeline for the agent. This cycle is referred to as a \"Test\". After any given test, that information would be used to inform the next round of ML testing to be done.</p>"},{"location":"spectre/#installation","title":"Installation","text":"<p>SPECTRE installs alongside an existing GHOSTS installation as a separate docker container. With a few configuration changes, you should be up and running in minimal time.</p> <p>There are only two configuration settings, both contained within <code>appsettings.json</code>:</p> <pre><code>\"DefaultConnection\": \"Host=localhost;Port=5432;Database=preferences;User Id=ghosts;Password=scotty@1;Pooling=true;Command Timeout=9900\",\n\"GhostsApiUrl\": \"http://localhost:5000\"\n</code></pre> <p>The first setting is for your connection to a necessary Postgres database, which SPECTRE will use for its operations. It is fine to host this on the same machine or container that you might be using for GHOSTS itself. In this case, either use the same user as GHOSTS or create a new user for SPECTRE.</p> <p>The second setting is for SPECTRE to access the GHOSTS API endpoints. This is used to get information about machines and to update their timelines, based on SPECTRE findings and executions.</p>"},{"location":"spectre/#quick-start","title":"Quick Start","text":"<p>Spectre is rather like an add-on -- it sits alongside the core API and uses that system to get its initial agent information, process their timelines, and then post updated timelines back to the API for dissemination to the clients.</p> <ul> <li>There is one setting in the spectre <code>appsettings.json</code> file that may need updating based on the install - it is how Spectre will connect to the GHOSTS Core API: <code>\"GhostsApiUrl\": \"http://host.docker.internal:52388\"</code> \u2014\u00a0update this to your core API host and port.</li> <li>Now go to Spectre's host:port/swagger to bring up the API.</li> <li><code>GET /Agents</code> will show you what you have under SPECTRE control - at the start, it is likely no agents. We need to sync with core GHOSTS Core API to get its agents into SPECTRE.</li> <li>So, we need to run <code>POST /Agents/sync</code> once to pull the agents in the core API over to SPECTRE.</li> <li>Now Spectre's <code>GET /Agents</code> will show you the same agents from ghosts Core API.</li> <li>You can now run a browse recommendations job.</li> </ul> <ol> <li> <p>This work is detailed in the technical report Using Machine Learning to Increase NPC Fidelity. Some of the team also discussed this project in an SEI podcast episode, entitled ML-Driven Decision-Making in Realistic Cyber Exercises.\u00a0\u21a9</p> </li> </ol>"}]}